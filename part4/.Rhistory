geom_point(color='gray')
ggplot(p12,aes(x=cut, y=cut_avg)) +
geom_bar(stat="identity",fill=c('red','orange','yellow','green','blue')) +
geom_point(color='black', size = 3)
ggplot(p12,aes(x=cut, y=cut_avg)) +
geom_bar(stat="identity",fill=c('red','orange','yellow','green','blue')) +
geom_point(color='black', size = 3) +
geom_line()
ggplot(p12,aes(x=cut, y=cut_avg)) +
geom_bar(stat="identity",fill=c('right red','orange','yellow','green','blue')) +
geom_point(color='black', size = 3) +
ggplot(p11,)
ggplot(p12,aes(x=cut, y=cut_avg)) +
geom_bar(stat="identity",fill=c('dark red','orange','yellow','green','blue')) +
geom_point(color='black', size = 3) +
ggplot(p11,)
ggplot(p12,aes(x=cut, y=cut_avg)) +
geom_bar(stat="identity",fill=c('dark red','orange','yellow','green','blue')) +
geom_point(color='black', size = 3)
ggplot(p12,aes(x=cut, y=cut_avg)) +
geom_bar(stat="identity",fill=c('red','orange','yellow','green','blue')) +
geom_point(color='black', size = 3)
ggplot(p12,aes(x=cut, y=cut_avg),title = 'Cut별 가격변화') +
geom_bar(stat="identity",fill=c('red','orange','yellow','green','blue')) +
geom_point(color='black', size = 3)
ggplot(mpg,aes(x=cty,y=hwy)) +
geom_point(stat="identity") +
ggtitle('mpg데이터 도시연비와 고속도로연비 산점도')
ggplot(mpg,aes(x=cty,y=hwy)) +
geom_point(stat="identity") +
ggtitle('mpg데이터 도시연비와 고속도로연비 산점도')
ggplot(mpg,aes(x=cty,y=hwy)) +
geom_point(stat="identity") +
ggtitle('mpg데이터 도시연비와 고속도로연비 산점도')
# 3. cut과 color에 따른 가격의 변화를 보여주는 그래프를 작성하세요.
diamonds
p2<- midwest
poptotal
ggplot(poptotal,aes(x=poptotal,y=popasian)) +
geom_point(stat="identity")
p3 <- mpg
p4 <- p3 %>%
group_by(manufacturer) %>%
filter(class == "suv") %>%
summarise(cty_avg = mean(cty))%>%
head(5)
ggplot(p4, aes(x=manufacturer,y=cty_avg)) +
geom_bar(stat="identity", fill="dark green", colour="red")
p4 <- p3 %>%
group_by(manufacturer) %>%
filter(class == "suv") %>%
summarise(cty_avg = mean(cty))%>%
arrange(desc(cty_avg))%>%
head(5)
ggplot(p4, aes(x=manufacturer,y=cty_avg)) +
geom_bar(stat="identity", fill="dark green", colour="red")
p4
ggplot(p4, aes(x=manufacturer,y=cty_avg)) +
geom_bar(stat="identity", fill=manufacturer)
ggplot(p4, aes(x=reorder(manufacturer,-cty_avg),y=cty_avg)) +
geom_col()
ggplot(p4, aes(x=reorder(manufacturer,-cty_avg),y=cty_avg,fill=manufacturer)) +
geom_col()
p3 <- mpg
p5 <- p3 %>%
group_by(class)%>%
summarise(class_count = n()) %>%
arrange(desc(class_count))
ggplot(p5, aes(x=class,y=class_count)) + geom_bar(stat="identity", fill= "grey", colour="white")
ggplot(p5, aes(x=class,y=class_count)) + geom_col(stat="identity", fill= "grey", colour="white")
ggplot(p5, aes(x=class,y=class_count)) + geom_col()
bar
ggplot(p5, aes(x=class,y=class_count)) + geom_bar(stat="identity", fill= "grey", colour="white")
economics
ggplot(economics,aes(x=date,y=psavert)) +
geom_segment(aes(yend=psavert),xend=0)
p6 <-ggplot(economics,aes(x=date, y=psavert))
p6 + geom_point(color='red') + geom_line()
par(mfrow=c(1,3))
boxplot(compact_cty$cty,
col=c('red'),
names=c('compact_cty'),
main='compact')
boxplot(subcompact_cty$cty,
col=c('green'),
names=c('subcompact_cty'),
main='subcompact')
boxplot(suv_cty$cty,
col=c('yellow'),
names=c('suv_cty'),
main='suv')
ggplot(p9, aes(x=cut,y=cut_count)) + geom_bar(stat="identity", fill= "grey", colour="white")
ggplot(p9, aes(x=cut,y=cut_count,fill=cut)) + geom_bar(stat="identity", fill= "grey", colour="white")
ggplot(p9, aes(x=cut,y=cut_count,fill=cut)) + geom_bar(stat="identity", fill= "grey", colour="white")
ggplot(p9, aes(x=cut,y=cut_count, fill=cut)) + geom_bar(stat="identity", fill= "grey", colour="white")
ggplot(p9, aes(x=cut,fill=cut)) + geom_bar(stat="identity", fill= "grey", colour="white")
ggplot(p9, aes(x=cut,y=cut_count)) + geom_bar(stat="identity", fill= "grey", colour="white")
ggplot(p9, aes(x=cut,y=cut_count, fill=cut)) + geom_bar(stat="identity", fill= "grey", colour="white")
ggplot(p9, aes(x=cut,y=cut_count, fill=cut)) + geom_bar(stat="identity", fill= "grey", colour="white")
ggplot(p9, aes(x=cut,y=cut_count, fill=cut)) + geom_bar(stat="identity", fill= "grey", colour="white")
ggplot(p9, aes(x=cut,y=cut_count, fill=cut)) + geom_bar()
ggplot(p9, aes(x=cut,y=cut_count)) + geom_bar(stat="identity", fill= "grey", colour="white")
ggplot(p9, aes(x=cut,y=cut_count)) + geom_bar(stat="identity", fill= cut, colour="white")
ggplot(p9, aes(x=cut,y=cut_count)) + geom_bar(stat="identity", fill=cut, colour="white")
ggplot(p9, aes(x=cut,y=cut_count)) + geom_bar(stat="identity", fill="gray", colour="white")
ggplot(p12,aes(x=cut, y=cut_avg)) +
geom_bar(stat="identity",fill=c('red','orange','yellow','green','blue')) +
geom_point(color='black', size = 3)
ggplot(p12,aes(x=cut, y=cut_avg, fill=cut)) +
geom_col()
# 3. cut과 color에 따른 가격의 변화를 보여주는 그래프를 작성하세요.
View(diamonds)
diamonds %>%
group_by(color)%>%
summarise(col_price_avg = mean(price))
p13 <- diamonds %>%
group_by(color)%>%
summarise(col_price_avg = mean(price))
p13
ggplot(p13,aes(x=color,fill=color)) + geom_col()
ggplot(p13,aes(x=color,y=col_price_avg,fill=color)) + geom_col()
knitr::opts_chunk$set(echo = TRUE)
ggplot(mpg,aes(x=cty,y=hwy)) +
geom_point(stat="identity") +
ggtitle('mpg데이터 도시연비와 고속도로연비 산점도')
ggplot(mpg,aes(x=cty,y=hwy)) +
geom_point(stat="identity") +
ggtitle('mpg데이터 도시연비와 고속도로연비 산점도')
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(
echo = TRUE,
message = TRUE,
warning = TRUE
)
p2<- midwest
poptotal <- p2 %>%
filter(poptotal <= 500000, popasian <=10000)
poptotal
ggplot(poptotal,aes(x=poptotal,y=popasian)) +
geom_point(stat="identity")
p3 <- mpg
p4 <- p3 %>%
group_by(manufacturer) %>%
filter(class == "suv") %>%
summarise(cty_avg = mean(cty))%>%
arrange(desc(cty_avg))%>%
head(5)
p3 <- mpg
p4 <- p3 %>%
group_by(manufacturer) %>%
filter(class == "suv") %>%
summarise(cty_avg = mean(cty))%>%
arrange(desc(cty_avg))%>%
head(5)
ggplot(p4, aes(x=reorder(manufacturer,-cty_avg),y=cty_avg,fill=manufacturer)) +
geom_col()
p3 <- mpg
p5 <- p3 %>%
group_by(class)%>%
summarise(class_count = n()) %>%
arrange(desc(class_count))
ggplot(p5, aes(x=class,y=class_count)) + geom_bar(stat="identity", fill= "grey", colour="white")
p6 <-ggplot(economics,aes(x=date, y=psavert))
p6 + geom_point(color='red') + geom_line()
p3 <- mpg
compact_cty <- filter(p3, class == 'compact') ; compact_cty
subcompact_cty <- filter(p3, class == 'subcompact') ; subcompact_cty
suv_cty <- filter(p3, class == 'suv') ; suv_cty
par(mfrow=c(1,3))
boxplot(compact_cty$cty,
col=c('red'),
names=c('compact_cty'),
main='compact')
boxplot(subcompact_cty$cty,
col=c('green'),
names=c('subcompact_cty'),
main='subcompact')
boxplot(suv_cty$cty,
col=c('yellow'),
names=c('suv_cty'),
main='suv')
p9 <- diamonds %>%
group_by(cut)%>%
summarise(cut_count = n()) %>%
arrange(desc(cut_count))
ggplot(p9, aes(x=cut,y=cut_count)) + geom_bar(stat="identity", fill="gray", colour="white")
p12 <-diamonds %>%
group_by(cut) %>%
summarise(cut_avg = mean(price))
ggplot(p12,aes(x=cut, y=cut_avg)) +
geom_bar(stat="identity",fill=c('red','orange','yellow','green','blue')) +
geom_point(color='black', size = 3)
p13 <- diamonds %>%
group_by(color)%>%
summarise(col_price_avg = mean(price))
ggplot(p13,aes(x=color,y=col_price_avg,fill=color)) + geom_col()
palete <- brewer.pal(9,"Set1")
knitr::opts_chunk$set(include = FALSE, eval = FALSE)
library(KoNLP)
library(wordcloud)
library(RColorBrewer)
useSejongDic()
library(stringr)
setwd('D:/Workspace/R_Data_Analysis/Part2/Stage1_WordCloud/EX04_work')
txt <- readLines('data/응답소_여름.txt')
answer2 <- sapply(txt,extractNoun,USE.NAMES = F)
head(unlist(answer2),30)
cdata <- unlist(answer2)
answer2 <- str_replace_all(cdata,'[^[:alpha:]]','')
answer2 <- gsub(' ','',answer2)
txt <- readLines('data/gsub.txt')
cnt_txt <- length(txt)
i <- 1
for (i in 1:cnt_txt) {
answer2 <- gsub((txt[i]),'',answer2)
}
answer2 <- Filter(function(x) {nchar(x) >= 2}, answer2)
answer2 <- Filter(function(x) {nchar(x) <= 10}, answer2)
write(unlist(answer2),'answer_2.txt')
rev2 <- read.table('answer_2.txt')
wordcount2 <- table(rev2)
palete <- brewer.pal(9,"Set1")
wordcloud(names(wordcount2), freq = wordcount2, scale = c(1,1), rot.per = 0.25, min.freq = 5,
random.order = F, random.color = T, colors=palete)
wordcloud(names(wordcount3), freq = wordcount3, scale = c(1,1), rot.per = 0.25, min.freq = 30,
random.order = F, random.color = T, colors=palete)
wordcloud(names(wordcount3), freq = wordcount3, scale = c(1,1), rot.per = 0.25, min.freq = 2,
random.order = F, random.color = T, colors=palete)
knitr::opts_chunk$set(include = FALSE, eval = FALSE)
library(KoNLP)
library(wordcloud)
library(RColorBrewer)
useSejongDic()
library(stringr)
setwd('D:/Workspace/R_Data_Analysis/Part2/Stage1_WordCloud/EX04_work')
wordcloud(names(wordcount), freq = wordcount, scale = c(1,1), rot.per = 0.25, min.freq = 30,
random.order = F, random.color = T, colors=palete)
txt <- readLines('data/응답소_봄.txt')
answer1 <- sapply(txt,extractNoun,USE.NAMES = F)
cdata <- unlist(answer1)
answer1 <- str_replace_all(cdata,'[^[:alpha:]]','')
answer1 <- gsub(' ','',answer1)
txt <- readLines('data/gsub.txt')
cnt_txt <- length(txt)
i <- 1
for (i in 1:cnt_txt) {
answer1 <- gsub((txt[i]),'',answer1)
}
answer1 <- Filter(function(x) {nchar(x) >= 2}, answer1)
answer1 <- Filter(function(x) {nchar(x) <= 6}, answer1)
write(unlist(answer1),'answer_1.txt')
rev <- read.table('answer_1.txt')
wordcount <- table(rev)
palete <- brewer.pal(9,"Set1")
wordcloud(names(wordcount), freq = wordcount, scale = c(1,1), rot.per = 0.25, min.freq = 30,
random.order = F, random.color = T, colors=palete)
wordcloud(names(wordcount), freq = wordcount, scale = c(3,1), rot.per = 0.25, min.freq = 30,
random.order = F, random.color = T, colors=palete)
install.packages('ggiraphExtra')
library(ggiraphExtra)
library(ggplot2)
library(dplyr)
library(reshape2)
library(stringr)
library(extrafont)
str(USArrests)
head(USArrests)
tail(USArrests)
summary(USArrests)
library(tibble)
crime <- rownames_to_column(USArrests, var = "state")
crime
crime$state <- tolower(crime$state)
install.packages('map_data')
install.packages('maps')
#미국의 주 지도 데이터 준비하기
states_map <- map_data("state")
str(states_map)
# 단계 구분도 만들기
ggChoropleth(data=crime,
aes(fill=Muder,
map_id = state).
map = states_map)
library(mapproj)
install.packages('mapproj')
library(mapproj)
# 단계 구분도 만들기
ggChoropleth(data=crime,
aes(fill=Muder,
map_id = state).
map = states_map)
# 단계 구분도 만들기
ggChoropleth(data=crime,
aes(fill=Muder,
map_id = state).
map = states_map))
# 단계 구분도 만들기
ggChoropleth(data=crime,
aes(fill=Muder,
map_id = state),
map = states_map)
# 단계 구분도 만들기
ggChoropleth(data=crime,
aes(fill=Murder,
map_id = state),
map = states_map)
#인터랙트비 단계구분도 만들기
ggChoropleth(filll=crime,
aes(fill=Rape,
map_id = state),
map = states_map,
interactive = T)
#인터랙트비 단계구분도 만들기
ggChoropleth(fill=crime,
aes(fill=Rape,
map_id = state),
map = states_map,
interactive = T)
#인터랙트비 단계구분도 만들기
ggChoropleth(data=crime,
aes(fill=Rape,
map_id = state),
map = states_map,
interactive = T)
cirme
crime
ggChoropleth(data=crime,
aes(fill=Assault,
map_id = state),
map = states_map,
interactive = T)
ggChoropleth(data=crime,
aes(fill=UrbanPop,
map_id = state),
map = states_map,
interactive = T)
#인터랙트비 단계구분도 만들기
ggChoropleth(data=crime,
aes(fill=Murder,
map_id = state),
map = states_map,
interactive = T)
#인터랙트비 단계구분도 만들기
ggChoropleth(data=crime,
aes(fill=Murder,
map_id = state),
map = states_map,
interactive = T) +
ggtilte('미국 주별 살인범죄 분포',
xlab(경도),
ylab(위도))
#인터랙트비 단계구분도 만들기
ggChoropleth(data=crime,
aes(fill=Murder,
map_id = state),
map = states_map,
interactive = T) +
ggtitle('미국 주별 살인범죄 분포',
xlab(경도),
ylab(위도))
#인터랙트비 단계구분도 만들기
ggChoropleth(data=crime,
aes(fill=Murder,
map_id = state),
map = states_map,
interactive = T) +
ggtitle('미국 주별 살인범죄 분포'),
xlab(경도),
ylab(위도))
ggChoropleth(data=crime,
aes(fill=Rape,
map_id = state),
map = states_map,
interactive = T)
#인터랙트비 단계구분도 만들기
ggChoropleth(data=crime,
aes(fill=Murder,
map_id = state),
map = states_map,
interactive = T) +
ggtitle('미국 주별 살인범죄 분포') +
xlab('경도') +
ylab('위도')
theme(plot.title = element_text(face = 'bold', hjust = 0.5, size = 15, color= 'dark red'))
xlab('경도') +
ggChoropleth(data=crime,
aes(fill=Murder,
map_id = state),
map = states_map,
interactive = T) +
ggtitle(paste('미국 주별 살인범죄 분포','(단위: 인구 10만명당 건수)') +
xlab('경도') +
ylab('위도') +
theme(plot.title = element_text(face = 'bold', hjust = 0.5,
size = 15, color= 'dark red'))
ggChoropleth(data=crime,
aes(fill=Murder,
map_id = state),
map = states_map,
interactive = T) +
ggtitle(paste('미국 주별 살인범죄 분포','(단위: 인구 10만명당 건수)') +
xlab('경도') +
ylab('위도') +
theme(plot.title = element_text(face = 'bold', hjust = 0.5,
size = 15, color= 'dark red'))
ggtitle('미국 주별 살인범죄 분포','(단위: 인구 10만명당 건수)') +
xlab('경도') +
ylab('위도') +
theme(plot.title = element_text(face = 'bold', hjust = 0.5,
size = 15, color= 'dark red'))
#인터랙트비 단계구분도 만들기
ggChoropleth(data=crime,
aes(fill=Murder,
map_id = state),
map = states_map,
interactive = T) +
ggtitle('미국 주별 살인범죄 분포','(단위: 인구 10만명당 건수)') +
xlab('경도') +
ylab('위도') +
theme(plot.title = element_text(face = 'bold', hjust = 0.5,
size = 15, color= 'dark red'),
plot.subtitle = element_text(hjust=1.0))
#인터랙트비 단계구분도 만들기
ggChoropleth(data=crime,
aes(fill=Murder,
map_id = state),
map = states_map,
interactive = T)
#인터랙트비 단계구분도 만들기
ggChoropleth(data=crime,
aes(fill=Murder,
map_id = state),
map = states_map,
interactive = T) +
ggtitle('미국 주별 살인범죄 분포','(단위: 인구 10만명당 건수)')
xlab('경도') +
ylab('위도') +
theme(plot.title = element_text(face = 'bold', hjust = 0.5,
size = 15, color= 'dark red'),
plot.subtitle = element_text(hjust=1.0))
#인터랙트비 단계구분도 만들기
ggChoropleth(data=crime,
aes(fill=Murder,
map_id = state),
map = states_map,
interactive = T) +
ggtitle('미국 주별 살인범죄 분포','(단위: 인구 10만명당 건수)')
#인터랙트비 단계구분도 만들기
ggChoropleth(data=crime,
aes(fill=Murder,
map_id = state),
map = states_map,
interactive = T)
library(ggplot2)
#인터랙트비 단계구분도 만들기
ggChoropleth(data=crime,
aes(fill=Murder,
map_id = state),
map = states_map,
interactive = T) +
ggtitle('미국 주별 살인범죄 분포','(단위: 인구 10만명당 건수)')
#인터랙트비 단계구분도 만들기
ggChoropleth(data=crime,
aes(fill=Murder,
map_id = state),
map = states_map,
interactive = T)
xlab("경도") +
ylab("위도") +
theme(plot.title = element_text(face = 'bold', hjust = 0.5,
size = 15, color= 'dark red'),
plot.subtitle = element_text(hjust=1.0))
ggtitle("미국 주별 살인범죄 분포","(단위: 인구 10만명당 건수")) +
xlab("경도") +
ylab("위도") +
theme(plot.title = element_text(face = 'bold', hjust = 0.5,
size = 15, color= 'dark red'),
plot.subtitle = element_text(hjust=1.0))
install.packages('stringi')
install.packages('stringi')
install.packages('stringi')
install.packages("stringi")
install.packages('stringi')
install.packages('devtools')
devtools::install_github("cardiomoon/kormaps2014")
library(kormaps2014)
str(changeCode(korpop1))
library(dplyr)
korpop1 <- rename(korpop1,
pop=총인구_명,
name=행정구역별_읍면동)
str(changeCode(korpop1))
head(changeCode(korpop1))
library(ggiraphExtra)
ggChoropleth(data=korpop1,
aes(fill=pop,
map_id = code),
map = kormap1,
interactive = T))
library(ggiraphExtra)
ggChoropleth(data=korpop1,
aes(fill=pop,
map_id = code),
map = kormap1,
interactive = T))
library(mapproj)
ggChoropleth(data=korpop1,
aes(fill=pop,
map_id = code),
map = kormap1,
interactive = T))
