panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_line(color="red", linetype="dashed"))
p10 <- diamonds
p10
p10 %>%
filter(cut == Fair)
p10 %>%
filter(cut == 'Fair')
ggplot(p10,aes(x = cut, y=reorder(carat,price))) +
geom_point(size=2) +
theme_bw() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_line(color="red", linetype="dashed"))
p11<-p10 %>%
filter(cut == 'Fair')
ggplot(p11,aes(x = cut, y=reorder(carat,price))) +
geom_point(size=2) +
theme_bw() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_line(color="red", linetype="dashed"))
ggplot(p11,aes(x = price, y=cut)) +
geom_point(size=2) +
theme_bw() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_line(color="red", linetype="dashed"))
panel.grid.major.y = element_line(color="red", linetype="dashed"))
ggplot(p11,aes(x = price, y=reorder(cut,price))) +
geom_point(size=2) +
theme_bw() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.y = element_line(color="red", linetype="dashed"))
p11<-p10 %>%
group_by(cut) %>%
summarise(cut_avg = mean(pirce))
p11<-p10 %>%
group_by(cut) %>%
summarise(cut_avg = mean(price))
p11<-p10 %>%
group_by(cut) %>%
summarise(cut_avg = mean(price)) , p11
p11<-p10 %>%
group_by(cut) %>%
summarise(cut_avg = mean(price)) ; p11
geom_bar()
p11<-p10 %>%
group_by(cut) %>%
summarise(cut_avg = mean(price)) ; p11
geom_bar(stat="identity")
p11<-p10 %>%
group_by(cut) %>%
summarise(cut_avg = mean(price)) ; p11
geom_bar(stat="identity")
geom_line(stat="identity")
geom_line(stat="identity",header=T)
geom_line(stat="identity")
geom_line(stat="identity")
p11<-p10 %>%
group_by(cut) %>%
summarise(cut_avg = mean(price),header=T) ; p11
ggplot(p11,aes(x=cut+avg, y=cut) +
geom_line(stat="identity")
geom_line(stat="identity")
geom_area(stat="identity")
geom_area(stat="identity")
geom_area(stat="identity")
ggplot(diamonds,aes(x=cut_avg, y=price)) +
geom_area(stat="identity")
# Diamonds 데이터 셋을 이용하여 다음 문제를 해결하세요.
# 단, 컬러, 제목, x축, y축 등 그래프를 예쁘게 작성하세요.
library(ggplot2)
# Diamonds 데이터 셋을 이용하여 다음 문제를 해결하세요.
# 단, 컬러, 제목, x축, y축 등 그래프를 예쁘게 작성하세요.
library(ggplot2)
ggplot(diamonds,aes(x=cut_avg, y=price)) +
geom_area(stat="identity")
ggplot(diamonds,aes(x=cut, y=price)) +
geom_area(stat="identity")
ggplot(diamonds,aes(x=cut, y=price)) +
geom_line(stat="identity")
p11<-p10 %>%
group_by(cut) %>%
mutate(cumsum(price),cum_sum_price)
p11<-p10 %>%
group_by(cut) %>%
mutate(cum_sum_price = cumsum(price))
source('D:/Workspace/R_Data_Analysis/part4/오진영_2.R', encoding = 'UTF-8', echo=TRUE)
p10
p11<-p10 %>%
group_by(cut) %>%
mutate(cum_sum_price = cumsum(price)) ; p11
View(p11)
p12<-p10 %>%
group_by(cut) %>%
mutate(cum_sum_price = cumsum(price)) ; p12
p10 %>%
group_by(cut) %>%
mutate(cum_sum_price = cumsum(price)) ;
source('D:/Workspace/R_Data_Analysis/part4/오진영_2.R', encoding = 'UTF-8', echo=TRUE)
p10 %>%
group_by(cut) %>%
mutate(cum_sum_price = cumsum(price))
View(p10)
p12 <-p10 %>%
group_by(cut) %>%
mutate(cum_sum_price = cumsum(price))
p12 <-diamonds %>%
group_by(cut) %>%
mutate(cum_sum_price = cumsum(price))
# 2. cut에 따른 가격의 변화를 보여주는 그래프를 작성하세요.
library(dplyr)
p12 <-diamonds %>%
group_by(cut) %>%
mutate(cum_sum_price = cumsum(price))
p12
ggplot(p12,aes(x=cut, y=price)) +
geom_line(stat="identity")
View(p12)
ggplot(p12,aes(x=cut, y=cum_sum_price)) +
geom_line(stat="identity")
mutate(cum_sum_price = cumsum(price))
p12 <-diamonds %>%
group_by(cut) %>%
filter(cut == Fair) %>%
mutate(cum_sum_price = cumsum(price))
p12 <-diamonds %>%
group_by(cut) %>%
filter(cut == "Fair") %>%
mutate(cum_sum_price = cumsum(price))
p12
ggplot(p12,aes(x=price, y=cum_sum_price)) +
geom_line(stat="identity")
geom_line(stat="identity")
geom_line(stat="identity")
geom_line()
ggplot(p12,aes(x=price, y=reorder(price,cum_sum_price))) +
geom_line()
ggplot(p12,aes(x=price, y=reorder(cum_sum_price,price))) +
geom_line()
ggplot(p12,aes(x=price, y=reorder(cum_sum_price,cum_sum_price))) +
geom_line()
ggplot(p12,aes(x=price, y=cum_sum_price)) +
geom_line()
p12 <-diamonds %>%
group_by(cut) %>%
summarise(cut_sum = sum(price))
p12
p12 <-diamonds %>%
group_by(cut) %>%
summarise(cut_avg = mean(price))
p12
ggplot(p12,aes(x=cut, y=cum_avg)) +
geom_bar()
ggplot(p12,aes(x=cut, y=cut_avg)) +
geom_bar()
ggplot(p12,aes(x=cut, y=cut_avg)) +
geom_bar(stat="identity")
ggplot(p12,aes(x=cut, y=cut_avg)) +
geom_bar(stat="identity",fill=c('red','orange','yellow','green','blue'))
ggplot(p12,aes(x=cut, y=cut_avg)) +
geom_bar(stat="identity",fill=c('red','orange','yellow','green','blue')) +
geom_point
ggplot(p12,aes(x=cut, y=cut_avg)) +
geom_bar(stat="identity",fill=c('red','orange','yellow','green','blue')) +
geom_point
ggplot(p12,aes(x=cut, y=cut_avg)) +
geom_bar(stat="identity",fill=c('red','orange','yellow','green','blue')) +
geom_point()
ggplot(p12,aes(x=cut, y=cut_avg)) +
geom_bar(stat="identity",fill=c('red','orange','yellow','green','blue')) +
geom_point(color='gray')
ggplot(p12,aes(x=cut, y=cut_avg)) +
geom_bar(stat="identity",fill=c('red','orange','yellow','green','blue')) +
geom_point(color='black', size = 3)
ggplot(p12,aes(x=cut, y=cut_avg)) +
geom_bar(stat="identity",fill=c('red','orange','yellow','green','blue')) +
geom_point(color='black', size = 3) +
geom_line()
ggplot(p12,aes(x=cut, y=cut_avg)) +
geom_bar(stat="identity",fill=c('right red','orange','yellow','green','blue')) +
geom_point(color='black', size = 3) +
ggplot(p11,)
ggplot(p12,aes(x=cut, y=cut_avg)) +
geom_bar(stat="identity",fill=c('dark red','orange','yellow','green','blue')) +
geom_point(color='black', size = 3) +
ggplot(p11,)
ggplot(p12,aes(x=cut, y=cut_avg)) +
geom_bar(stat="identity",fill=c('dark red','orange','yellow','green','blue')) +
geom_point(color='black', size = 3)
ggplot(p12,aes(x=cut, y=cut_avg)) +
geom_bar(stat="identity",fill=c('red','orange','yellow','green','blue')) +
geom_point(color='black', size = 3)
ggplot(p12,aes(x=cut, y=cut_avg),title = 'Cut별 가격변화') +
geom_bar(stat="identity",fill=c('red','orange','yellow','green','blue')) +
geom_point(color='black', size = 3)
ggplot(mpg,aes(x=cty,y=hwy)) +
geom_point(stat="identity") +
ggtitle('mpg데이터 도시연비와 고속도로연비 산점도')
ggplot(mpg,aes(x=cty,y=hwy)) +
geom_point(stat="identity") +
ggtitle('mpg데이터 도시연비와 고속도로연비 산점도')
ggplot(mpg,aes(x=cty,y=hwy)) +
geom_point(stat="identity") +
ggtitle('mpg데이터 도시연비와 고속도로연비 산점도')
# 3. cut과 color에 따른 가격의 변화를 보여주는 그래프를 작성하세요.
diamonds
p2<- midwest
poptotal
ggplot(poptotal,aes(x=poptotal,y=popasian)) +
geom_point(stat="identity")
p3 <- mpg
p4 <- p3 %>%
group_by(manufacturer) %>%
filter(class == "suv") %>%
summarise(cty_avg = mean(cty))%>%
head(5)
ggplot(p4, aes(x=manufacturer,y=cty_avg)) +
geom_bar(stat="identity", fill="dark green", colour="red")
p4 <- p3 %>%
group_by(manufacturer) %>%
filter(class == "suv") %>%
summarise(cty_avg = mean(cty))%>%
arrange(desc(cty_avg))%>%
head(5)
ggplot(p4, aes(x=manufacturer,y=cty_avg)) +
geom_bar(stat="identity", fill="dark green", colour="red")
p4
ggplot(p4, aes(x=manufacturer,y=cty_avg)) +
geom_bar(stat="identity", fill=manufacturer)
ggplot(p4, aes(x=reorder(manufacturer,-cty_avg),y=cty_avg)) +
geom_col()
ggplot(p4, aes(x=reorder(manufacturer,-cty_avg),y=cty_avg,fill=manufacturer)) +
geom_col()
p3 <- mpg
p5 <- p3 %>%
group_by(class)%>%
summarise(class_count = n()) %>%
arrange(desc(class_count))
ggplot(p5, aes(x=class,y=class_count)) + geom_bar(stat="identity", fill= "grey", colour="white")
ggplot(p5, aes(x=class,y=class_count)) + geom_col(stat="identity", fill= "grey", colour="white")
ggplot(p5, aes(x=class,y=class_count)) + geom_col()
bar
ggplot(p5, aes(x=class,y=class_count)) + geom_bar(stat="identity", fill= "grey", colour="white")
economics
ggplot(economics,aes(x=date,y=psavert)) +
geom_segment(aes(yend=psavert),xend=0)
p6 <-ggplot(economics,aes(x=date, y=psavert))
p6 + geom_point(color='red') + geom_line()
par(mfrow=c(1,3))
boxplot(compact_cty$cty,
col=c('red'),
names=c('compact_cty'),
main='compact')
boxplot(subcompact_cty$cty,
col=c('green'),
names=c('subcompact_cty'),
main='subcompact')
boxplot(suv_cty$cty,
col=c('yellow'),
names=c('suv_cty'),
main='suv')
ggplot(p9, aes(x=cut,y=cut_count)) + geom_bar(stat="identity", fill= "grey", colour="white")
ggplot(p9, aes(x=cut,y=cut_count,fill=cut)) + geom_bar(stat="identity", fill= "grey", colour="white")
ggplot(p9, aes(x=cut,y=cut_count,fill=cut)) + geom_bar(stat="identity", fill= "grey", colour="white")
ggplot(p9, aes(x=cut,y=cut_count, fill=cut)) + geom_bar(stat="identity", fill= "grey", colour="white")
ggplot(p9, aes(x=cut,fill=cut)) + geom_bar(stat="identity", fill= "grey", colour="white")
ggplot(p9, aes(x=cut,y=cut_count)) + geom_bar(stat="identity", fill= "grey", colour="white")
ggplot(p9, aes(x=cut,y=cut_count, fill=cut)) + geom_bar(stat="identity", fill= "grey", colour="white")
ggplot(p9, aes(x=cut,y=cut_count, fill=cut)) + geom_bar(stat="identity", fill= "grey", colour="white")
ggplot(p9, aes(x=cut,y=cut_count, fill=cut)) + geom_bar(stat="identity", fill= "grey", colour="white")
ggplot(p9, aes(x=cut,y=cut_count, fill=cut)) + geom_bar()
ggplot(p9, aes(x=cut,y=cut_count)) + geom_bar(stat="identity", fill= "grey", colour="white")
ggplot(p9, aes(x=cut,y=cut_count)) + geom_bar(stat="identity", fill= cut, colour="white")
ggplot(p9, aes(x=cut,y=cut_count)) + geom_bar(stat="identity", fill=cut, colour="white")
ggplot(p9, aes(x=cut,y=cut_count)) + geom_bar(stat="identity", fill="gray", colour="white")
ggplot(p12,aes(x=cut, y=cut_avg)) +
geom_bar(stat="identity",fill=c('red','orange','yellow','green','blue')) +
geom_point(color='black', size = 3)
ggplot(p12,aes(x=cut, y=cut_avg, fill=cut)) +
geom_col()
# 3. cut과 color에 따른 가격의 변화를 보여주는 그래프를 작성하세요.
View(diamonds)
diamonds %>%
group_by(color)%>%
summarise(col_price_avg = mean(price))
p13 <- diamonds %>%
group_by(color)%>%
summarise(col_price_avg = mean(price))
p13
ggplot(p13,aes(x=color,fill=color)) + geom_col()
ggplot(p13,aes(x=color,y=col_price_avg,fill=color)) + geom_col()
knitr::opts_chunk$set(echo = TRUE)
ggplot(mpg,aes(x=cty,y=hwy)) +
geom_point(stat="identity") +
ggtitle('mpg데이터 도시연비와 고속도로연비 산점도')
ggplot(mpg,aes(x=cty,y=hwy)) +
geom_point(stat="identity") +
ggtitle('mpg데이터 도시연비와 고속도로연비 산점도')
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(
echo = TRUE,
message = TRUE,
warning = TRUE
)
p2<- midwest
poptotal <- p2 %>%
filter(poptotal <= 500000, popasian <=10000)
poptotal
ggplot(poptotal,aes(x=poptotal,y=popasian)) +
geom_point(stat="identity")
p3 <- mpg
p4 <- p3 %>%
group_by(manufacturer) %>%
filter(class == "suv") %>%
summarise(cty_avg = mean(cty))%>%
arrange(desc(cty_avg))%>%
head(5)
p3 <- mpg
p4 <- p3 %>%
group_by(manufacturer) %>%
filter(class == "suv") %>%
summarise(cty_avg = mean(cty))%>%
arrange(desc(cty_avg))%>%
head(5)
ggplot(p4, aes(x=reorder(manufacturer,-cty_avg),y=cty_avg,fill=manufacturer)) +
geom_col()
p3 <- mpg
p5 <- p3 %>%
group_by(class)%>%
summarise(class_count = n()) %>%
arrange(desc(class_count))
ggplot(p5, aes(x=class,y=class_count)) + geom_bar(stat="identity", fill= "grey", colour="white")
p6 <-ggplot(economics,aes(x=date, y=psavert))
p6 + geom_point(color='red') + geom_line()
p3 <- mpg
compact_cty <- filter(p3, class == 'compact') ; compact_cty
subcompact_cty <- filter(p3, class == 'subcompact') ; subcompact_cty
suv_cty <- filter(p3, class == 'suv') ; suv_cty
par(mfrow=c(1,3))
boxplot(compact_cty$cty,
col=c('red'),
names=c('compact_cty'),
main='compact')
boxplot(subcompact_cty$cty,
col=c('green'),
names=c('subcompact_cty'),
main='subcompact')
boxplot(suv_cty$cty,
col=c('yellow'),
names=c('suv_cty'),
main='suv')
p9 <- diamonds %>%
group_by(cut)%>%
summarise(cut_count = n()) %>%
arrange(desc(cut_count))
ggplot(p9, aes(x=cut,y=cut_count)) + geom_bar(stat="identity", fill="gray", colour="white")
p12 <-diamonds %>%
group_by(cut) %>%
summarise(cut_avg = mean(price))
ggplot(p12,aes(x=cut, y=cut_avg)) +
geom_bar(stat="identity",fill=c('red','orange','yellow','green','blue')) +
geom_point(color='black', size = 3)
p13 <- diamonds %>%
group_by(color)%>%
summarise(col_price_avg = mean(price))
ggplot(p13,aes(x=color,y=col_price_avg,fill=color)) + geom_col()
palete <- brewer.pal(9,"Set1")
knitr::opts_chunk$set(include = FALSE, eval = FALSE)
library(KoNLP)
library(wordcloud)
library(RColorBrewer)
useSejongDic()
library(stringr)
setwd('D:/Workspace/R_Data_Analysis/Part2/Stage1_WordCloud/EX04_work')
txt <- readLines('data/응답소_여름.txt')
answer2 <- sapply(txt,extractNoun,USE.NAMES = F)
head(unlist(answer2),30)
cdata <- unlist(answer2)
answer2 <- str_replace_all(cdata,'[^[:alpha:]]','')
answer2 <- gsub(' ','',answer2)
txt <- readLines('data/gsub.txt')
cnt_txt <- length(txt)
i <- 1
for (i in 1:cnt_txt) {
answer2 <- gsub((txt[i]),'',answer2)
}
answer2 <- Filter(function(x) {nchar(x) >= 2}, answer2)
answer2 <- Filter(function(x) {nchar(x) <= 10}, answer2)
write(unlist(answer2),'answer_2.txt')
rev2 <- read.table('answer_2.txt')
wordcount2 <- table(rev2)
palete <- brewer.pal(9,"Set1")
wordcloud(names(wordcount2), freq = wordcount2, scale = c(1,1), rot.per = 0.25, min.freq = 5,
random.order = F, random.color = T, colors=palete)
wordcloud(names(wordcount3), freq = wordcount3, scale = c(1,1), rot.per = 0.25, min.freq = 30,
random.order = F, random.color = T, colors=palete)
wordcloud(names(wordcount3), freq = wordcount3, scale = c(1,1), rot.per = 0.25, min.freq = 2,
random.order = F, random.color = T, colors=palete)
knitr::opts_chunk$set(include = FALSE, eval = FALSE)
library(KoNLP)
library(wordcloud)
library(RColorBrewer)
useSejongDic()
library(stringr)
setwd('D:/Workspace/R_Data_Analysis/Part2/Stage1_WordCloud/EX04_work')
wordcloud(names(wordcount), freq = wordcount, scale = c(1,1), rot.per = 0.25, min.freq = 30,
random.order = F, random.color = T, colors=palete)
txt <- readLines('data/응답소_봄.txt')
answer1 <- sapply(txt,extractNoun,USE.NAMES = F)
cdata <- unlist(answer1)
answer1 <- str_replace_all(cdata,'[^[:alpha:]]','')
answer1 <- gsub(' ','',answer1)
txt <- readLines('data/gsub.txt')
cnt_txt <- length(txt)
i <- 1
for (i in 1:cnt_txt) {
answer1 <- gsub((txt[i]),'',answer1)
}
answer1 <- Filter(function(x) {nchar(x) >= 2}, answer1)
answer1 <- Filter(function(x) {nchar(x) <= 6}, answer1)
write(unlist(answer1),'answer_1.txt')
rev <- read.table('answer_1.txt')
wordcount <- table(rev)
palete <- brewer.pal(9,"Set1")
wordcloud(names(wordcount), freq = wordcount, scale = c(1,1), rot.per = 0.25, min.freq = 30,
random.order = F, random.color = T, colors=palete)
wordcloud(names(wordcount), freq = wordcount, scale = c(3,1), rot.per = 0.25, min.freq = 30,
random.order = F, random.color = T, colors=palete)
## R Markdown
knitr::opts_chunk$set(echo = TRUE)
gg <- read.csv('2000-2013년 연령별실업율_연령별평균_세로.csv')
library(ggplot2)
library(ggplot2)
windowsFonts(malgun = "맑은 고딕")
theme_update(text = element_text(family = "malgun"))
setwd('D:/Workspace/R_Data_Analysis/Part2/Stage3_StructuredData/EX99_실전문제')
gg <- read.csv('2000-2013년 연령별실업율_연령별평균_세로.csv')
gg_long <- melt(gg, id=c('연도'),
variable.name = '연령', value.name= '실업율')
gg_long <- melt(gg, id=c('연도'),
variable.name = '연령', value.name= '실업율')
library(reshape2)
gg <- read.csv('2000-2013년 연령별실업율_연령별평균_세로.csv')
gg_long <- melt(gg, id=c('연도'),
variable.name = '연령', value.name= '실업율')
ggplot(gg_long, aes(x =연도, y =실업율, color = 연령, group=연령)) +
geom_line( size=1) +
scale_color_discrete(' ')+
geom_point(size = 1.5) +
geom_vline(xintercept=seq(0,14,1), linetype="dotted", size= 0.1) +
geom_hline(yintercept=seq(0,10,0.5), lty='dotted', size=0.1) +
theme_classic(base_family="malgun",base_size=10) +
theme(axis.text.x=element_text(angle=90, hjust=1, vjust=1,
colour="black", size=8)) +
ggtitle(paste('연령별 실업율 현황(단위 %) 출처 : 통계청')) +
theme(plot.title = element_text(family="malgun",
face = 'bold',
hjust = 0.5,
size = 25,
color = 'darkblue'))
bus <- read.csv('버스노선별이용현황합계.csv')
bus$승차인원 <- bus$승차인원/1000
bus$하차인원 <- bus$하차인원/1000
bus1 <- melt(bus,id =c('버스노선번호'), variable.name = '승하차구분', value.name='승하차인원')
ggplot(bus1, aes(x =버스노선번호, y = 승하차인원, fill = 승하차구분)) +
geom_bar(position= 'dodge', stat = 'identity') +
geom_vline(xintercept=seq(0,32,1), linetype="dotted", size= 0.1) +
geom_hline(yintercept=seq(0,300,10), lty='dotted', size=0.1, col = 'white') +
theme_classic(base_family="malgun",base_size=10) +
theme(axis.text.x=element_text(angle=90, hjust=1, vjust=1,
colour="black", size=8)) +
ggtitle(paste('서울 주요 마을 버스 이용 승객 현황(2014년 1월)','\n','단위(천명)')) +
theme(plot.title=element_text(face="bold", size=25,
hjust=0.5, color="black")) +
geom_text(aes(label=승하차인원),color = 'dark orange',vjust=-0.3,size=3)
mapo <- read.csv('마포09번이용현황.csv')
View(mapo)
mapo1 <- melt(mapo,id =c('정류소명'), variable.name = '승하차구분', value.name='승하차인원')
View(mapo1)
ggplot(mapo1, aes(x =정류소명, y =승하차인원, color = 승하차구분, group=승하차구분)) +
geom_line(size=1) +
geom_point(size = 1.5) +
geom_vline(xintercept=seq(0,32,1), linetype="dotted", size= 0.1) +
geom_hline(yintercept=seq(0,40000,1000), lty='dotted', size=0.1) +
theme_classic(base_family="malgun",base_size=10) +
theme(axis.text.x=element_text(angle=90, hjust=1, vjust=1,
colour="black", size=8)) +
ggtitle(paste('마포 09번 마을버스 이용현황 분석')) +
theme(plot.title = element_text(family="malgun",
face = 'bold',
hjust = 0.5,
size = 20,
color = 'darkblue'))
bus <- read.csv('버스노선별이용현황합계.csv')
bus$승차인원 <- bus$승차인원/1000
bus$하차인원 <- bus$하차인원/1000
bus1 <- melt(bus,id =c('버스노선번호'), variable.name = '승하차구분', value.name='승하차인원')
ggplot(bus1, aes(x =버스노선번호, y = 승하차인원, fill = 승하차구분)) +
geom_bar(position= 'dodge', stat = 'identity') +
geom_vline(xintercept=seq(0,32,1), linetype="dotted", size= 0.1) +
geom_hline(yintercept=seq(0,300,10), lty='dotted', size=0.1, col = 'white') +
theme_classic(base_family="malgun",base_size=10) +
theme(axis.text.x=element_text(angle=90, hjust=1, vjust=1,
colour="black", size=8)) +
ggtitle(paste('서울 주요 마을 버스 이용 승객 현황(2014년 1월)','\n','단위(천명)')) +
theme(plot.title=element_text(face="bold", size=25,
hjust=0.5, color="black")) +
geom_text(aes(label=승하차인원),color = 'dark orange',vjust=-0.3,size=3)
