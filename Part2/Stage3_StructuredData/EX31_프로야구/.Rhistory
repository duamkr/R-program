size = 15, color= 'dark red'))
#인터랙트비 단계구분도 만들기
ggChoropleth(data=crime,
aes(fill=Murder,
map_id = state),
map = states_map,
interactive = T) +
ggtitle('미국 주별 살인범죄 분포','(단위: 인구 10만명당 건수)') +
xlab('경도') +
ylab('위도') +
theme(plot.title = element_text(face = 'bold', hjust = 0.5,
size = 15, color= 'dark red'),
plot.subtitle = element_text(hjust=1.0))
#인터랙트비 단계구분도 만들기
ggChoropleth(data=crime,
aes(fill=Murder,
map_id = state),
map = states_map,
interactive = T)
#인터랙트비 단계구분도 만들기
ggChoropleth(data=crime,
aes(fill=Murder,
map_id = state),
map = states_map,
interactive = T) +
ggtitle('미국 주별 살인범죄 분포','(단위: 인구 10만명당 건수)')
xlab('경도') +
ylab('위도') +
theme(plot.title = element_text(face = 'bold', hjust = 0.5,
size = 15, color= 'dark red'),
plot.subtitle = element_text(hjust=1.0))
#인터랙트비 단계구분도 만들기
ggChoropleth(data=crime,
aes(fill=Murder,
map_id = state),
map = states_map,
interactive = T) +
ggtitle('미국 주별 살인범죄 분포','(단위: 인구 10만명당 건수)')
#인터랙트비 단계구분도 만들기
ggChoropleth(data=crime,
aes(fill=Murder,
map_id = state),
map = states_map,
interactive = T)
library(ggplot2)
#인터랙트비 단계구분도 만들기
ggChoropleth(data=crime,
aes(fill=Murder,
map_id = state),
map = states_map,
interactive = T) +
ggtitle('미국 주별 살인범죄 분포','(단위: 인구 10만명당 건수)')
#인터랙트비 단계구분도 만들기
ggChoropleth(data=crime,
aes(fill=Murder,
map_id = state),
map = states_map,
interactive = T)
xlab("경도") +
ylab("위도") +
theme(plot.title = element_text(face = 'bold', hjust = 0.5,
size = 15, color= 'dark red'),
plot.subtitle = element_text(hjust=1.0))
ggtitle("미국 주별 살인범죄 분포","(단위: 인구 10만명당 건수")) +
xlab("경도") +
ylab("위도") +
theme(plot.title = element_text(face = 'bold', hjust = 0.5,
size = 15, color= 'dark red'),
plot.subtitle = element_text(hjust=1.0))
install.packages('stringi')
install.packages('stringi')
install.packages('stringi')
install.packages("stringi")
install.packages('stringi')
install.packages('devtools')
devtools::install_github("cardiomoon/kormaps2014")
library(kormaps2014)
str(changeCode(korpop1))
library(dplyr)
korpop1 <- rename(korpop1,
pop=총인구_명,
name=행정구역별_읍면동)
str(changeCode(korpop1))
head(changeCode(korpop1))
library(ggiraphExtra)
ggChoropleth(data=korpop1,
aes(fill=pop,
map_id = code),
map = kormap1,
interactive = T))
library(ggiraphExtra)
ggChoropleth(data=korpop1,
aes(fill=pop,
map_id = code),
map = kormap1,
interactive = T))
library(mapproj)
ggChoropleth(data=korpop1,
aes(fill=pop,
map_id = code),
map = kormap1,
interactive = T))
vec3 <- req(1:3,2)
vec3 <- rep(1:3,2)
vec3 <- rep(1:3,2) ;vec3
vec3 <- rep(1:3,each=2) ;vec3
vec4 <- rep(1:3,2) ; vec4
# 1)
vec1 <- seq(1:6) ; vec1
vec2 <- seq(10,5,-1) ;vec2
vec3 <- rep(1:3,each=2) ;vec3
vec4 <- rep(1:3,2) ; vec4
vec5 <- seq(1,11,2) ; vec5
ifelse(평균 >= 60, 'D,','F'))))
df_score2 %>%
mutate(학점 = ifelse(평균 >= 90, 'A',
ifelse(평균 >= 80, 'B',
ifelse(평균 >= 70, 'C',
ifelse(평균 >= 60, 'D,','F')))))
library(dplyr)
df_score2 %>%
mutate(학점 = ifelse(평균 >= 90, 'A',
ifelse(평균 >= 80, 'B',
ifelse(평균 >= 70, 'C',
ifelse(평균 >= 60, 'D,','F')))))
# 특정변수의 값이 10이상 = color-> "red", 6-9 color -> yellow, 그 이하 값 "green"
oddSum <- function(pos) {
sum <- 0
for (i in seq(1, pos, 2)) {
sum <- sum + i
}
return(100)
}
oddSum(100)
3.675+0.475*1.5
mpg1 %>%
filter(manufacturer == 'toyota') %>%
mutate(cty_hwy_avg = cty + hwy / 2) %>%
arrange(desc(cty_hwy_avg)) %>%
head(3)
mpg1 <- mpg
mpg1 %>%
filter(manufacturer == 'toyota') %>%
mutate(cty_hwy_avg = cty + hwy / 2) %>%
arrange(desc(cty_hwy_avg)) %>%
head(3)
mpg1 <- mpg
View(mpg)
mpg1 <- mpg
# 8. R 내장 데이터인 "diamonds"를 이용하여 다음의 그래프를 그리시오
# 8-1) clarity 의 돗수를 보여주는 그래프
head(diamonds)
library(ggoplot2)
library(ggoplot)
library(gplot2)
library(gplot)
library(ggplot2)
# 8. R 내장 데이터인 "diamonds"를 이용하여 다음의 그래프를 그리시오
# 8-1) clarity 의 돗수를 보여주는 그래프
head(diamonds)
ggplot(diamonds, aes(x = clarity, fill = clarity)) +
geom_bar()
seq(1,5,2)
seq(from=1,to=5,by=2)
seq(by=2,to=5,from=1)
seq(2,5,1)
seq(-3, 3, length.out = 60)
seq(-3, 3, length.out = 61)
seq(-3,3,0.1)
x <- seq(-3,3,0.1)
x[1]
x[1,2,3]
x[c(1,2,3)]
# factor 질적 자료를 저장하는 자료구조
x <- 1:%
# factor 질적 자료를 저장하는 자료구조
x <- 1:5
x
factor(x, levels = c(1:4))
factor(x, levels= c(1,2,3,4), labels = c('a','b','c','d'))
factor(x, levels= c(1,2,3,4), labels = c('a','b','c','d'), orders = T)
factor(x, levels= c(1,2,3,4), labels = c('a','b','c','d'), orderde = T)
factor(x, levels= c(1,2,3,4), labels = c('a','b','c','d'), orderde = T)
factor(x, levels= c(1,2,3,4), labels = c('a','b','c','d'), ordered = T)
x1 <- c('월','화','수','목','금','토','일')
ㅌ1
x1
factor(x1, levels = c(1:7))
x1 <- c(1:7)
x1 <- c(1:7) ; x1
factor(x1, levels = c(1:7), labels = c('월','화','수','목','금','토','일'))
factor(week, levels = c(1:7), labels = c('월','화','수','목','금','토','일'))
week <- c(1:7) ; x1
factor(week, levels = c(1:7), labels = c('월','화','수','목','금','토','일'))
factor(week, levels = c(1:7), labels = c('일','월','화','수','목','금','토'))
factor(week, levels = c(1:7), labels = c('일','월','화','수','목','금','토'),orderde = TRUE)
factor(week, levels = c(1:7), labels = c('일','월','화','수','목','금','토'), orderde = TRUE)
factor(week, levels = c(1:7), labels = c('일','월','화','수','목','금','토'), ordered = TRUE)
week
week <-factor(week, levels = c(1:7), labels = c('일','월','화','수','목','금','토'))
week <-factor(week, levels = c(1:7), labels = c('일','월','화','수','목','금','토'), ordered = TRUE)
week
name <- c('철수','영희','길동')
age <- c(21, 20, 31)
gender <- factor(c('M','F','M'))
str(character)
character <- data.frame(name,age,gender)
str(character)
cahracter
character
person <- data.frame(name,age,gender)
str(person)
person
person$name
persom[1,]
person[1,]
person$name
person(,2)
person[,2]
person[3,1]
setwd('D:/Workspace/R_Statistics/ch02')
# 2장
setwd('D:/Workspace/R_Statistics/ch02')
data <- read.csv('2010년 인구사항.csv', header= F, na.strings = c(','))
str(data)
data$V1 <- factor(data$V1, lelvels=c(1,2),
labels = c("남자","여자"))
data$V1 <- factor(data$V1, levels=c(1,2),
labels = c("남자","여자"))
data$V3 <- factor(data$V3, levels = 1:14.
labels = c('가구주','가구주의 배우자','자녀','자녀의 배우자','가구주의 부모',
'배우자의 부모','손자녀, 그 배우자','증손자녀, 그 배우자','조부모','형제자매, 그 배우자',
'형재자매의 자녀, 그 배우자','부모의 형제자매, 그 배우자','기타 친인척','그외같이 사는사람'))
data$V3 <- factor(data$V3, levels = 1:14.
labels = c('가구주','가구주의 배우자','자녀','자녀의 배우자','가구주의 부모',
'배우자의 부모','손자녀, 그 배우자','증손자녀, 그 배우자','조부모','형제자매, 그 배우자',
'형재자매의 자녀 그 배우자','부모의 형제자매, 그 배우자','기타 친인척','그외같이 사는사람'))
data$V3 <- factor(data$V3, levels = 1:14,
labels = c('가구주','가구주의 배우자','자녀','자녀의 배우자','가구주의 부모',
'배우자의 부모','손자녀, 그 배우자','증손자녀, 그 배우자','조부모','형제자매, 그 배우자',
'형재자매의 자녀, 그 배우자','부모의 형제자매, 그 배우자','기타 친인척','그외같이 사는사람'))
data$V4 <- factor(data$V4, levels = 1:8,
labels= c('안 받았음','초등학교','중학교','고등학교','대학-4년제 미만','대학-4년제 이상','석사과정','박사과정'))
str(data)
head(data)
save.image("data.rda")
data <- read.csv('2010년 인구사항.csv', header= F, na.strings = c('.'))
str(data)
head(data)
save.image("data.rda")
print(1+2)
1+2
print('a',1)
print('a')
print(c('a',1))
# 8. R 내장 데이터인 "diamonds"를 이용하여 다음의 그래프를 그리시오
# 8-1) clarity 의 돗수를 보여주는 그래프
head(diamonds)
ggplot(diamonds, aes(x = clarity, fill = clarity)) +     # y값을 안주면 카운트해서 y로 축으로 지정됨
geom_bar()
# 8-2) clarity 따른 가격의 변화를 보여주는 그래프
View(diamond)
# 8-2) clarity 따른 가격의 변화를 보여주는 그래프
View(diamonds)
# 8-2) clarity 따른 가격의 변화를 보여주는 그래프
ggplot(diamonds, aes(x = clarity, y = price, fill= clarity)) +
geom_col()
# 9. 실습 데이터중 야구성적.csv 파일을 이용하여 다음의 그래프를 그리시오
# OPS(출류율 + 장타율)와 연봉대비OPS(OPS / 연봉 * 100)를 구하시오
setwd('D:/Workspace/R_Data_Analysis/Part2/Stage3_StructuredData/EX31_프로야구')
options(digit = 4)
base <- read.csv('야구성적.csv')
base1 <-base %>%
mutate(ops = 출루율 + 장타율)%>%
mutate(연봉대비ops = (ops / 연봉) * 100)%>%
mutate(평균ops = sum(ops) / 25)%>%
mutate(ylabel = paste(sprintf("%4.1f", 연봉대비ops), '%', sep=''))
View(base1)
ggplot(base1, aes(x =선수명, y = 연봉대비출루율, fill = 선수명)) +
geom_bar(position= 'dodge', stat = 'identity') +
geom_text(aes(label=ylabel),color = 'black',vjust=-0.3,size=3) +
ggtitle(paste('연봉대비 OPS분석_선수별')) +
theme(plot.title=element_text(face="bold", size=10,
hjust=0.5, color="black"))
ggplot(base1, aes(x =선수명, y = 연봉대비출루율, fill = 선수명)) +
geom_bar(stat = 'identity') +
geom_text(aes(label=ylabel),color = 'black',vjust=-0.3,size=3) +
ggtitle(paste('연봉대비 OPS분석_선수별')) +
theme(plot.title=element_text(face="bold", size=10,
hjust=0.5, color="black"))
ggplot(base1, aes(x =선수명, y = 연봉대비ops, fill = 선수명)) +
geom_bar(stat = 'identity') +
geom_text(aes(label=ylabel),color = 'black',vjust=-0.3,size=3) +
ggtitle(paste('연봉대비 OPS분석_선수별')) +
theme(plot.title=element_text(face="bold", size=10,
hjust=0.5, color="black"))
base1 <-base %>%
mutate(ops = 출루율 + 장타율)%>%
mutate(연봉대비ops = (ops / 연봉) * 100)%>%
#mutate(평균ops = sum(ops) / 25)%>%
#mutate(ylabel = paste(sprintf("%4.1f", 연봉대비ops), '%', sep=''))
head(base1)
options(digit = 4)
base <- read.csv('야구성적.csv')
base1 <-base %>%
mutate(ops = 출루율 + 장타율)%>%
mutate(연봉대비ops = (ops / 연봉) * 100)%>%
#mutate(평균ops = sum(ops) / 25)%>%
#mutate(ylabel = paste(sprintf("%4.1f", 연봉대비ops), '%', sep=''))
head(base1)
base1 <-base %>%
mutate(ops = 출루율 + 장타율)%>%
mutate(연봉대비ops = (ops / 연봉) * 100)
#mutate(평균ops = sum(ops) / 25)%>%
#mutate(ylabel = paste(sprintf("%4.1f", 연봉대비ops), '%', sep=''))
head(base1)
base1 <-base %>%
mutate(ops = 출루율 + 장타율)%>%
mutate(연봉대비ops = ops / 연봉 * 100)
ggplot(base1, aes(x =선수명, y = 연봉대비출루율율, fill = 선수명)) +
geom_bar(stat = 'identity') +
geom_text(aes(label=ylabel),color = 'black',vjust=-0.3,size=3) +
ggtitle(paste('연봉대비 OPS분석_선수별')) +
theme(plot.title=element_text(face="bold", size=10,
hjust=0.5, color="black"))
ggplot(base1, aes(x =선수명, y = 연봉대비출루율, fill = 선수명)) +
geom_bar(stat = 'identity') +
geom_text(aes(label=ylabel),color = 'black',vjust=-0.3,size=3) +
ggtitle(paste('연봉대비 OPS분석_선수별')) +
theme(plot.title=element_text(face="bold", size=10,
hjust=0.5, color="black"))
ggplot(base1, aes(x =선수명, y = 연봉대비출루율, fill = 선수명)) +
geom_bar(stat = 'identity')
ggplot(base1, aes(x =선수명, y = 연봉대비ops, fill = 선수명)) +
geom_bar(stat = 'identity') +
geom_text(aes(label=ylabel),color = 'black',vjust=-0.3,size=3) +
ggtitle(paste('연봉대비 OPS분석_선수별')) +
theme(plot.title=element_text(face="bold", size=10,
hjust=0.5, color="black"))
base1 <-base %>%
mutate(ops = 출루율 + 장타율)%>%
mutate(연봉대비ops = ops / 연봉 * 100) +
#mutate(평균ops = sum(ops) / 25)%>%
mutate(ylabel = paste(sprintf("%4.1f", 연봉대비ops), '%', sep=''))
base1 <-base %>%
mutate(ops = 출루율 + 장타율)%>%
mutate(연봉대비ops = ops / 연봉 * 100) %>%
mutate(ylabel = paste(sprintf("%4.1f", 연봉대비ops), '%', sep=''))
ggplot(base1, aes(x =선수명, y = 연봉대비ops, fill = 선수명)) +
geom_bar(stat = 'identity') +
geom_text(aes(label=ylabel),color = 'black',vjust=-0.3,size=3) +
ggtitle(paste('연봉대비 OPS분석_선수별')) +
theme(plot.title=element_text(face="bold", size=10,
hjust=0.5, color="black"))
# 8-2) clarity 따른 가격의 변화를 보여주는 그래프
d1 <- diamonds %>%
group_by(clarity) %>%
summarise(price_mean = mean(price))
d1
ggplot(d1, aes(x = clarity, y = price_mean, fill = clariry))
ggplot(d1, aes(x = clarity, y = price_mean, fill = clariry)) +
geom_col()
ggplot(d1, aes(x = clarity, y = price_mean, fill = clarity)) +
geom_col()
# 2) 다음과 같이 네명의 학생이 중간 시험과 기말 시험을 봤다.
# 2-1) 위 자료를 데이터 프레임으로 만들어 df_score 라는 변수에 할당하시오.
이름 <- c('강경학', '김태균', '이성열', '정은원') ; 이름
중간 <- c(90, 78, 94, 70)
기말 <- c(50, 60, 90, 92)
df_score <- data.frame(이름, 중간, 기말)
df_score
#  2-2) 위 자료에 평균이라는 필드를 추가하고 중간과 기말 시험의 평균을 구해서 평균이라는 필드에 할당하시오
df_score2 <-df_score %>%
mutate(평균 = (중간 + 기말) / 2)
df_score2
df_score2 %>%
mutate(학점 = ifelse(평균 >= 90, 'A',
ifelse(평균 >= 80, 'B',
ifelse(평균 >= 70, 'C',
ifelse(평균 >= 60, 'D,','F')))))
df_score2 %>%
mutate(학점 = ifelse(평균 >= 90, 'A',
ifelse(평균 >= 80, 'B',
ifelse(평균 >= 70, 'C',
ifelse(평균 >= 60, 'D','F')))))
oddSum(10)
oddSum(100)
#1~100까지 3의 배수의 합
oddSum <- function(pos) {
sum <- 0
for (i in seq(1, pos, 2)) {
sum <- sum + i
}
return(sum)
}
oddSum(100)
oddSum(50)
p3<- for(i in 1:i) {
sum <- sum + i
}
p3<- function(pos) {
for(i in 1:i) {
sum <- sum + i
}
return(pos)
}
p3(100)
sum <- sum + i + 2
sum <- sum + i
return(sum)
for(i in seq(1, pos, 2)) {
sum <- sum + i
}
sum <- 0
p3<- function(pos) {
sum <- 0
for(i in seq(1, pos, 2)) {
sum <- sum + i
}
return(sum)
}
p3(100)
mpg1 %>%
filter(manufacturer == 'toyota') %>%
group_by(model) %>%
summarise(mean_chwy = (cty + hwy) / 2) %>%
arrange(desc(cty_hwy_avg)) %>%
head(3)
mpg1 <- mpg
mpg1 %>%
filter(manufacturer == 'toyota') %>%
group_by(model) %>%
summarise(mean_chwy = (cty + hwy) / 2) %>%
arrange(desc(cty_hwy_avg)) %>%
head(3)
mpg1 %>%
filter(manufacturer == 'toyota') %>%
group_by(model) %>%
summarise(mean_chwy = (cty + hwy) / 2) %>%
arrange(desc(cty_hwy_avg))
mpg1 %>%
filter(manufacturer == 'toyota') %>%
group_by(model) %>%
summarise(avg = (cty + hwy) / 2) %>%
arrange(desc(cty_hwy_avg))
mpg1 %>%
filter(manufacturer == 'toyota') %>%
group_by(model) %>%
summarise(avg = (cty + hwy) / 2) %>%
arrange(desc(cty_hwy_avg))
mpg1 %>%
filter(manufacturer == 'toyota') %>%
group_by(model) %>%
summarise(avg = (cty + hwy) / 2) %>%
arrange(desc(cty_hwy_avg))%>%
head(3)
mpg1 %>%
filter(manufacturer == 'toyota') %>%
group_by(model) %>%
summarise(avg = mean((cty + hwy)) / 2) %>%
arrange(desc(cty_hwy_avg))%>%
head(3)
mpg1 %>%
filter(manufacturer == 'toyota') %>%
group_by(model) %>%
summarise(avg = mean((cty + hwy)) / 2) %>%
arrange(desc(avg))%>%
head(3)
# 7. R 내장 데이터인 "mpg"를 이용하여 다음의 그래프를 그리시오
# 7-1) suv 자동차의 시내 연비가 높은 7개 회사와 시내연비
mpg2 <- mpg1 %>%
group_by(manufacturer) %>%
filter(class == 'suv') %>%
summarise(cty_avg = mean(cty)) %>%
arrange(desc(cty_avg)) %>%
head(7)
# 7. R 내장 데이터인 "mpg"를 이용하여 다음의 그래프를 그리시오
# 7-1) suv 자동차의 시내 연비가 높은 7개 회사와 시내연비
mpg2 <- mpg1 %>%
group_by(manufacturer) %>%
filter(class == 'suv') %>%
summarise(cty_avg = mean(cty)) %>%
arrange(desc(cty_avg)) %>%
head(7)
# 7-2) 막대 그래프 형식의 컬러그래프
mpg2
ggplot(mpg2, aes(x = manufacturer, y= cty_avg, fill = manufacturer)) +
geom_bar(position= 'dodge',stat='identity')
ggplot(mpg2, aes(x = manufacturer, y= cty_avg, fill = manufacturer)) +
geom_bar(stat ='identity')
vec3 <- rep(1:3,each=2) ;vec3
vec4 <- rep(1:3,2) ; vec4
# 2) 다음과 같이 네명의 학생이 중간 시험과 기말 시험을 봤다.
# 2-1) 위 자료를 데이터 프레임으로 만들어 df_score 라는 변수에 할당하시오.
이름 <- c('강경학', '김태균', '이성열', '정은원') ; 이름
중간 <- c(90, 78, 94, 70)
기말 <- c(50, 60, 90, 92)
df_score <- data.frame(이름, 중간, 기말)
df_score
n <- c('강경학', '김태균', '이성열', '정은원') ; 이름
m <- c(90, 78, 94, 70)
h <- c(50, 60, 90, 92)
df_score1 <- data.frame(이름=n, 중간=m, 기말=h)
df_score1
vec1 <- c(1,2,3,4,5)
vec1(length())
vec1(length(3))
vec1[length()]
vec1[length(5)]
vec1[length(1)]
stringi
string
