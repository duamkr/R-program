filter(mpg, manufacturer == 'ford' | manufacturer=='honda'| manufacturer='toyota')
mpg%>%
group_by(manufacturer)%>%
filter(mpg, manufacturer == 'ford' | manufacturer=='honda'| manufacturer='toyota')%>%
summarise(average = hwy)
mpg%>%
group_by(manufacturer)%>%
summarise(average = hwy)
mpg%>%
group_by(manufacturer)%>%
summarise(average = mean(hwy))
mpg%>%
group_by(manufacturer)%>%
summarise(average = mean(hwy))%>%
filter(mpg, manufacturer == 'ford' | manufacturer=='honda'| manufacturer='toyota')
mpg%>%
group_by(manufacturer)%>%
summarise(average = mean(hwy))%>%
?cat(
)
mpg%>%
group_by(manufacturer)%>%
summarise(average = mean(hwy))%>%
?cat()
mpg%>%
group_by(manufacturer)%>%
summarise(average = mean(hwy))
mpg%>%
group_by(manufacturer)%>%
summarise(average = mean(hwy))%>%
arrange(desc(average))
mpg%>%
group_by(manufacturer)%>%
summarise(average = mean(hwy))%>%
arrange(desc(average))%>%
head(3)
mpg%>%
group_by(manufacturer)%>%
summarise(average = mean(hwy))%>%
arrange(desc(average))%>%
filter(manufacturer == 'honda')
mpg%>%
group_by(manufacturer)%>%
summarise(average = mean(hwy))%>%
arrange(desc(average))%>%
filter(manufacturer == 'honda' | manufacturer == 'toyoya')
mpg%>%
group_by(manufacturer)%>%
summarise(average = mean(hwy))%>%
arrange(desc(average))%>%
filter(manufacturer == 'honda', manufacturer == 'toyoya')
mpg%>%
group_by(manufacturer)%>%
summarise(average = mean(hwy))%>%
arrange(desc(average))%>%
filter(manufacturer == 'honda', manufacturer == 'toyoya', manufacturer == 'audi')
mpg%>%
group_by(manufacturer)%>%
summarise(average = mean(hwy))%>%
arrange(desc(average))%>%
filter(mpg,manufacturer == 'honda', manufacturer == 'toyoya', manufacturer == 'audi')
mpg%>%
group_by(manufacturer)%>%
summarise(average = mean(hwy))%>%
arrange(desc(average))%>%
filter(mpg,manufacturer == 'honda'| manufacturer == 'toyoya'| manufacturer == 'audi')
mpg%>%
filter(mpg,manufacturer == 'honda'| manufacturer == 'toyoya'| manufacturer == 'audi')
mpg%>%
filter(mpg,manufacturer == 'honda'| manufacturer == 'toyoya'| manufacturer == 'audi')
mpg%>%
filter(mpg,manufacturer == 'honda'| manufacturer == 'toyoya'| manufacturer == 'audi')
mpg%>%
filter(mpg,manufacturer == 'honda')
mpg%>%
filter(mpg,manufacturer == 'honda')
mpg%>%
filter(mpg,manufacturer == "honda")
mpg%>%
group_by(manufacturer)%>%
summarise(average = mean(hwy))%>%
arrange(desc(average))%>%
filter(mpg,manufacturer $ 'honda')
mpg%>%
filter(mpg,manufacturer %in% "honda")
mpg%>%
filter(mpg,manufacturer %in% c("honda"))
filter(mpg,manufacturer %in% c('audi','honda','toyota'))
mpg%>%
group_by(manufacturer)%>%
summarise(average = mean(hwy))%>%
arrange(desc(average))%>%
filter(mpg,manufacturer $ 'honda')%>%
filter(mpg,manufacturer %in% c('audi','honda','toyota'))
mpg%>%
group_by(manufacturer)%>%
summarise(average = mean(hwy))%>%
arrange(desc(average))%>%
filter(mpg,manufacturer %in% c('audi','honda','toyota'))
filter(mpg,manufacturer %in% c('audi','honda','toyota'))
filter(mpg,manufacturer %in% c('audi','honda','toyota'))%>%
arrange(desc(average))
filter(mpg,manufacturer %in% c('audi','honda','toyota'))%>%
summarise(average = mean(hwy))%>%
arrange(desc(average))
mpg%>%
group_by(manufacturer)%>%
filter(mpg,manufacturer %in% c('audi','honda','toyota'))%>%
arrange(desc(average))
mpg%>%
group_by(manufacturer)%>%
arrange(desc(average))
mpg%>%
group_by(manufacturer)%>%
filter(mpg,manufacturer %in% c('audi','honda','toyota'))%>%
summarise(average = mean(hwy))%>%
arrange(desc(average))
mpg%>%
group_by(manufacturer)%>%
summarise(average = mean(hwy))%>%
filter(mpg,manufacturer %in% c('audi','honda','toyota'))%>%
arrange(desc(average))
mpg%>%
group_by(manufacturer)%>%
summarise(average = mean(hwy))%>%
filter(mpg,manufacturer %in% c('audi','honda','toyota'))%>%
arrange(desc(average))
mpg%>%
group_by(manufacturer)%>%
summarise(average = mean(hwy))%>%
arrange(desc(average))
p5 <- filter(mpg,manufacturer %in% c('chevrolet','honda','toyota'))
p5 <- filter(mpg,manufacturer %in% c('chevrolet','honda','toyota')) ; p5
mean(p5$cty)
p5%>%
group_by(manufacturer)%>%
summarise(average = mean(cty))
p5%>%
group_by(manufacturer)%>%
summarise(cty_average = mean(cty))
p5%>%
group_by(manufacturer)%>%
summarise(cty_average = mean(cty))
# 4번 문제
mpg2 <- select(mpg, 'class','cty',); mpg2
filter(mgp2, class %in% c('suv','compact'))
filter(mpg2, class %in% c('suv','compact'))
summarise(cty_average = mean(cty))
filter(mpg2, class %in% c('suv','compact'))%>%
group_by(class)%>%
summarise(cty_average = mean(cty))
filter(mpg,manufacturer %in% c('chevrolet','honda','toyota'))%>%
group_by(manufacturer)%>%
summarise(cty_average = mean(cty))
# 3번 문제
filter(mpg,manufacturer %in% c('chevrolet','honda','toyota'))%>%
group_by(manufacturer)%>%
summarise(cty_average = mean(cty))
# 6번 문제
mpg2%>%
filter(manufacturer == 'audi')
# 6번 문제
mpg2%>%
filter(manufacturer %in% 'audi')
# 6번 문제
mpg2%>%
filter(manufacturer %in% c('audi'))
# 6번 문제
mpg%>%
filter(manufacturer %in% c('audi'))
# 6번 문제
mpg%>%
filter(manufacturer %in% 'audi')
# 6번 문제
mpg%>%
filter(manufacturer %in% 'audi')%>%
group_by(model)%>%
summarise(hwy_average = mean(hwy))%>%
head(5)
# 6번 문제
mpg%>%
filter(manufacturer %in% 'audi')%>%
group_by(model)%>%
summarise(hwy_average = mean(hwy))
# 6번 문제
mpg%>%
filter(manufacturer %in% 'audi')%>%
summarise(hwy_average = mean(hwy))
# 6번 문제
mpg%>%
filter(manufacturer %in% 'audi')
# 6번 문제
mpg%>%
filter(manufacturer %in% 'audi')
mean(mpg$hwy)
# 6번 문제
mpg%>%
filter(manufacturer %in% 'audi')%>%
summarise(hwy_average = mean(hwy))
# 6번 문제
mpg%>%
filter(manufacturer %in% 'audi')%>%
arrange(desc(hwy))
# 6번 문제
mpg%>%
filter(manufacturer %in% 'audi')%>%
arrange(desc(hwy))%>%
head(5)
# 7번 문제
mpg3 <- mpg
# 7번 문제
mpg3 <- mpg ; mpg3
mpg3%>%
mutate(cty_hwy = cty+hwy / 2)
p6 <-mpg3%>%
mutate(cty_hwy = cty+hwy / 2) ; p6
p6 <-mpg3%>%
mutate(cty_hwy = cty+hwy) ; p6
# 2)
p7 <- p7%>%
mutate(cty_hwy_ave = cty_hwy /2)
# 2)
p7 <- p6%>%
mutate(cty_hwy_ave = cty_hwy /2)
# 2)
p7 <- p6%>%
mutate(cty_hwy_ave = cty_hwy /2) ; p7
# 3)
p7%>%
arrange(desc(cty_hwy_ave))
# 3)
p7%>%
arrange(desc(cty_hwy_ave))%>%
head(3)
# 4)
mpg%>%
mutate(cty_hwy = cty+hwy)%>%
mutate(cty_hwy_ave = cty_hwy /2)
# 4)
mpg%>%
mutate(cty_hwy = cty+hwy)%>%
mutate(cty_hwy_ave = cty_hwy /2)%>%
arrange(desc(cty_hwy_ave))%>%
head(3)
# 3)
p7%>%
arrange(desc(cty_hwy_ave))%>%
head(3)
mpg%>%
group_by(manufacturer)%>%
mpg%>%
group_by(manufacturer)%>%
summarise(cty_ave = mean(cty))
# 8번 문제
mpg
mpg%>%
group_by(manufacturer)%>%
summarise(cty_ave = mean(cty))
mpg%>%
group_by(manufacturer)%>%
summarise(cty_ave = mean(cty))
# 9번 문제
mpg%>%
group_by(manufacturer)%>%
summarise(cty_ave = mean(cty))%>%
arrange(desc(cty_ave))
# 10번 문제
mpg%>%
group_by(manufacturer)%>%
summarise(hwy_ave = mean(hwy))
# 10번 문제
mpg%>%
group_by(manufacturer)%>%
summarise(hwy_ave = mean(hwy))%>%
head(3)
mpg%>%
arrange(count = n())
arrange(compact_count = count(n())
arrange(compact_count = count(n())
arrange(compact_count = count(n())
mpg%>%
arrange(compact_count = count(n()))
mpg%>%
summarise(compact_count = count(n()))
mpg%>%
group_by(manufacturer)%>%
summarise(compact_count = count(n()))
summarise(compact_count = count(n())
mpg%>%
group_by(manufacturer)%>%
summarise(compact_count = n())
mpg%>%
group_by(manufacturer)
summarise(compact_count = n())
mpg%>%
group_by(manufacturer)%>%
summarise(compact_count = n())
mpg%>%
filter(class == 'compact')
mpg%>%
filter(class == 'compact')%>%
group_by(manufacturer)%>%
summarise(compact_count = n())
mpg%>%
filter(class == 'compact')%>%
group_by(manufacturer)%>%
summarise(compact_count = n())%>%
arrange(desc(compact_count))
install.packages('rJava')
install.packages('KoNLP')
install.packages('wordcloud')
library(rJava)
library(rJava)
install.packages('rJava')
library(rJava)
library(KoNLP)
library(wordcloud)
useSejongDic()
library(RColorBrewer)
library(KoNLP)
install.packages('KoNLP')
library(KoNLP)
library(KoNLP)
library(wordcloud)
install.packages('rJava')
library(KoNLP)
install.packages('KoNLP')
library(KoNLP)
library(rJava)
Sys.setenv(JAVA_HOME="C:/Program Files/Java/jre1.8.0_40")
library(KoNLP)
Sys.setenv(JAVA_HOME="C:/Program Files/Java/jre1.8.0_40")
Sys.setenv(JAVA_HOME="C:/Program Files/Java/jre1.8.0_212")
library(KoNLP)
library(stringr)
library(wordcloud)
install.packages("knitr")
knitr::opts_chunk$set(include = FALSE, eval = FALSE)
library(KoNLP)
library(wordcloud)
library(RColorBrewer)
useSejongDic()
library(stringr)
setwd('D:/Workspace/R_Data_Analysis/Part2/Stage1_WordCloud/EX04_work')
setwd('E:/workspace/R/R-program/Part2/Stage1_WordCloud/EX04_work')
txt <- readLines('data/응답소_봄.txt')
answer1 <- sapply(txt,extractNoun,USE.NAMES = F)
cdata <- unlist(answer1)
answer1 <- str_replace_all(cdata,'[^[:alpha:]]','')
answer1 <- gsub(' ','',answer1)
txt <- readLines('data/gsub.txt')
cnt_txt <- length(txt)
i <- 1
for (i in 1:cnt_txt) {
answer1 <- gsub((txt[i]),'',answer1)
}
answer1 <- Filter(function(x) {nchar(x) >= 2}, answer1)
answer1 <- Filter(function(x) {nchar(x) <= 6}, answer1)
write(unlist(answer1),'answer_1.txt')
rev <- read.table('answer_1.txt')
wordcount <- table(rev)
palete <- brewer.pal(9,"Set1")
wordcloud(names(wordcount), freq = wordcount, scale = c(3,1), rot.per = 0.25, min.freq = 30,
random.order = F, random.color = T, colors=palete)
wordcloud(names(wordcount), freq = wordcount, scale = c(2,1), rot.per = 0.25, min.freq = 30,
random.order = F, random.color = T, colors=palete)
wordcloud(names(wordcount), freq = wordcount, scale = c(2,1), rot.per = 0.25, min.freq = 30,
random.order = F, random.color = T, colors=palete)
answer1 <- sapply(txt,extractNoun,USE.NAMES = F)
setwd('E:/workspace/R/R-program/Part2/Stage1_WordCloud/EX07_work2')
library(KoNLP)
library(wordcloud)
library(rJava)
library(KoNLP)
library(RColorBrewer)
library(stringr)
library(tm)
install.packages('tm')
library(KoNLP)
mergeUserDic(data.frame(readLines('hiphop.txt'), "ncn"))
library(tm)
library(ggplot2)
library(dplyr)
install.packages('rJava')
library(rJava)
library(KoNLP)
install.packages('KoNLP')
library(KoNLP)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre1.8.0_212')
library(KoNLP)
library(wordcloud)
library(RColorBrewer)
useSejongDic()
mergeUserDic(data.frame(readLines('hiphop.txt'), "ncn"))
txt <- readLines('hiphop.txt')
txt
hip <- sapply(txt,extractNoun,USE.NAMES = F)
hip
head(unlist(hip),30)
hdata <- unlist(hip)
hip <- str_replace_all(hdata,"[^[:alpha:]]","")
txt1 <- readLines("gsub.txt")
txt1
cnt_txt <- length(txt1)
i <- 1
for(i in 1:cnt_txt) {
hip <- gsub((txt1[i]),"",hip)
}
corp1<- Corpus(VectorSource(hip))
corp2 <- tm_map(corp1, stripWhitespace)
corp2 <- tm_map(corp2, tolower)
corp2 <- tm_map(corp2, removeNumbers)
corp2 <- tm_map(corp2, removePunctuation)
sword2 <- c(stopwords('en'), 'and','but','not')
corp2 <- tm_map(corp2, removeWords, sword2)
corp3 <- TermDocumentMatrix(corp2,control = list(wordLengths = c(1,Inf)))
corp3
corp4 <- as.matrix(corp3)
corp4
freq1 <- sort(rowSums(corp4),decreasing = T)     # rowSums 행의 합계
head(freq1,20)
freq2 <- sort(colSums(corp4), decreasing = T)    # colSums 열의 합계
head(freq2,20)
freq1
dim(corp4)
corp2
palete <- brewer.pal(7,"Set3")
wordcloud(names(freq1), freq=freq1, scale=c(4,0.5), min.freq = 10, colors=palete, random.order = F,
random.color=T)
corp2
corp3 <- TermDocumentMatrix(corp2,control = list(wordLengths = c(1,Inf)))
corp3
corp4 <- as.matrix(corp3)
corp4
freq1 <- sort(rowSums(corp4),decreasing = T)     # rowSums 행의 합계
head(freq1,20)
freq2 <- sort(colSums(corp4), decreasing = T)    # colSums 열의 합계
head(freq2,20)
freq1
dim(corp4)
palete <- brewer.pal(7,"Set3")
wordcloud(names(freq1), freq=freq1, scale=c(4,0.5), min.freq = 10, colors=palete, random.order = F,
random.color=T)
hip <- Filter(function(x) {nchar(x) >= 2}, hip)
hip <- Filter(function(x) {nchar(x) <= 10}, hip)
corp1<- Corpus(VectorSource(hip))
corp2 <- tm_map(corp1, stripWhitespace)
corp2 <- tm_map(corp2, tolower)
corp2 <- tm_map(corp2, removeNumbers)
corp2 <- tm_map(corp2, removePunctuation)
sword2 <- c(stopwords('en'), 'and','but','not')
corp2 <- tm_map(corp2, removeWords, sword2)
corp2
corp3 <- TermDocumentMatrix(corp2,control = list(wordLengths = c(1,Inf)))
corp3
corp4 <- as.matrix(corp3)
corp4
freq1 <- sort(rowSums(corp4),decreasing = T)     # rowSums 행의 합계
head(freq1,20)
freq2 <- sort(colSums(corp4), decreasing = T)    # colSums 열의 합계
head(freq2,20)
freq1
dim(corp4)
palete <- brewer.pal(7,"Set3")
wordcloud(names(freq1), freq=freq1, scale=c(4,0.5), min.freq = 10, colors=palete, random.order = F,
random.color=T)
legend(0.3,1,'Hip hop!', cex=1,fill=NA,border = NA, bg='white', text.col='red',text.font = 2.2,
box.col = 'red')
legend(0.3,1,'Hip hop!', cex=1.2,fill=NA,border = NA, bg='white', text.col='red',text.font = 2.2,
box.col = 'red')
wordcloud(names(freq1), freq=freq1, scale=c(4,0.5), min.freq = 10, colors=palete, random.order = F,
random.color=T)
legend(0.3,1,'Hip hop!', cex=1.2,fill=NA,border = NA, bg='white', text.col='red',text.font = 2.2,
box.col = 'red')
legend(0.3,1,'Hip hop!', cex=1.2,fill=NA,border = NA, bg='white', text.col='red',text.font = 2.5,
box.col = 'red')
wordcloud(names(freq1), freq=freq1, scale=c(4,0.5), min.freq = 10, colors=palete, random.order = F,
random.color=T)
legend(0.3,1,'Hip hop!', cex=1.2,fill=NA,border = NA, bg='white', text.col='red',text.font = 2.5,
box.col = 'red')
wordcloud(names(freq1), freq=freq1, scale=c(4,0.5), min.freq = 10, colors=palete, random.order = F,
random.color=T)
legend(0.1,1,'Hip hop!', cex=1.2,fill=NA,border = NA, bg='white', text.col='red',text.font = 2.5,
box.col = 'red')
wordcloud(names(freq1), freq=freq1, scale=c(4,0.5), min.freq = 10, colors=palete, random.order = F,
random.color=T)
legend(0.2,1,'Hip hop!', cex=1.2,fill=NA,border = NA, bg='white', text.col='red',text.font = 2.5,
box.col = 'red')
legend(0.2,0.8,'Hip hop!', cex=1.2,fill=NA,border = NA, bg='white', text.col='red',text.font = 2.5,
box.col = 'red')
wordcloud(names(freq1), freq=freq1, scale=c(4,0.5), min.freq = 10, colors=palete, random.order = F,
random.color=T)
legend(0.2,0.8,'Hip hop!', cex=1.2,fill=NA,border = NA, bg='white', text.col='red',text.font = 2.5,
box.col = 'red')
wordcloud(names(freq1), freq=freq1, scale=c(4,0.5), min.freq = 10, colors=palete, random.order = F,
random.color=T)
legend(0.2,1.1,'Hip hop!', cex=1.2,fill=NA,border = NA, bg='white', text.col='red',text.font = 2.5,
box.col = 'red')
wordcloud(names(freq1), freq=freq1, scale=c(4,0.5), min.freq = 10, colors=palete, random.order = F,
random.color=T)
legend(0.2,1,'Hip hop!', cex=1.2,fill=NA, border = NA, bg='white', text.col='red',text.font = 2.5,
box.col = 'red')
wordcloud(names(freq1), freq=freq1, scale=c(4,0.5), min.freq = 10, colors=palete, random.order = F,
random.color=T)
wordcloud(names(freq1), freq=freq1, scale=c(4,0.5), min.freq = 10, colors=palete, random.order = F,
random.color=T)
legend(0.2,1,'Hip hop word Top10!', cex=1.2,fill=NA, border = NA, bg='white', text.col='red',text.font = 2.5,
box.col = 'red')
wordcloud(names(freq1), freq=freq1, scale=c(4,0.5), min.freq = 10, colors=palete, random.order = F,
random.color=T)
legend(0.2,1,'Hip hop word Top10!', cex=1.2,fill=NA, border = NA, bg='white', text.col='red',text.font = 2.5,
box.col = 'red')
