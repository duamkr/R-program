group_by(cut) %>%
mutate(cum_sum_price = cumsum(price))
View(p10)
p12 <-p10 %>%
group_by(cut) %>%
mutate(cum_sum_price = cumsum(price))
p12 <-diamonds %>%
group_by(cut) %>%
mutate(cum_sum_price = cumsum(price))
# 2. cut에 따른 가격의 변화를 보여주는 그래프를 작성하세요.
library(dplyr)
p12 <-diamonds %>%
group_by(cut) %>%
mutate(cum_sum_price = cumsum(price))
p12
ggplot(p12,aes(x=cut, y=price)) +
geom_line(stat="identity")
View(p12)
ggplot(p12,aes(x=cut, y=cum_sum_price)) +
geom_line(stat="identity")
mutate(cum_sum_price = cumsum(price))
p12 <-diamonds %>%
group_by(cut) %>%
filter(cut == Fair) %>%
mutate(cum_sum_price = cumsum(price))
p12 <-diamonds %>%
group_by(cut) %>%
filter(cut == "Fair") %>%
mutate(cum_sum_price = cumsum(price))
p12
ggplot(p12,aes(x=price, y=cum_sum_price)) +
geom_line(stat="identity")
geom_line(stat="identity")
geom_line(stat="identity")
geom_line()
ggplot(p12,aes(x=price, y=reorder(price,cum_sum_price))) +
geom_line()
ggplot(p12,aes(x=price, y=reorder(cum_sum_price,price))) +
geom_line()
ggplot(p12,aes(x=price, y=reorder(cum_sum_price,cum_sum_price))) +
geom_line()
ggplot(p12,aes(x=price, y=cum_sum_price)) +
geom_line()
p12 <-diamonds %>%
group_by(cut) %>%
summarise(cut_sum = sum(price))
p12
p12 <-diamonds %>%
group_by(cut) %>%
summarise(cut_avg = mean(price))
p12
ggplot(p12,aes(x=cut, y=cum_avg)) +
geom_bar()
ggplot(p12,aes(x=cut, y=cut_avg)) +
geom_bar()
ggplot(p12,aes(x=cut, y=cut_avg)) +
geom_bar(stat="identity")
ggplot(p12,aes(x=cut, y=cut_avg)) +
geom_bar(stat="identity",fill=c('red','orange','yellow','green','blue'))
ggplot(p12,aes(x=cut, y=cut_avg)) +
geom_bar(stat="identity",fill=c('red','orange','yellow','green','blue')) +
geom_point
ggplot(p12,aes(x=cut, y=cut_avg)) +
geom_bar(stat="identity",fill=c('red','orange','yellow','green','blue')) +
geom_point
ggplot(p12,aes(x=cut, y=cut_avg)) +
geom_bar(stat="identity",fill=c('red','orange','yellow','green','blue')) +
geom_point()
ggplot(p12,aes(x=cut, y=cut_avg)) +
geom_bar(stat="identity",fill=c('red','orange','yellow','green','blue')) +
geom_point(color='gray')
ggplot(p12,aes(x=cut, y=cut_avg)) +
geom_bar(stat="identity",fill=c('red','orange','yellow','green','blue')) +
geom_point(color='black', size = 3)
ggplot(p12,aes(x=cut, y=cut_avg)) +
geom_bar(stat="identity",fill=c('red','orange','yellow','green','blue')) +
geom_point(color='black', size = 3) +
geom_line()
ggplot(p12,aes(x=cut, y=cut_avg)) +
geom_bar(stat="identity",fill=c('right red','orange','yellow','green','blue')) +
geom_point(color='black', size = 3) +
ggplot(p11,)
ggplot(p12,aes(x=cut, y=cut_avg)) +
geom_bar(stat="identity",fill=c('dark red','orange','yellow','green','blue')) +
geom_point(color='black', size = 3) +
ggplot(p11,)
ggplot(p12,aes(x=cut, y=cut_avg)) +
geom_bar(stat="identity",fill=c('dark red','orange','yellow','green','blue')) +
geom_point(color='black', size = 3)
ggplot(p12,aes(x=cut, y=cut_avg)) +
geom_bar(stat="identity",fill=c('red','orange','yellow','green','blue')) +
geom_point(color='black', size = 3)
ggplot(p12,aes(x=cut, y=cut_avg),title = 'Cut별 가격변화') +
geom_bar(stat="identity",fill=c('red','orange','yellow','green','blue')) +
geom_point(color='black', size = 3)
ggplot(mpg,aes(x=cty,y=hwy)) +
geom_point(stat="identity") +
ggtitle('mpg데이터 도시연비와 고속도로연비 산점도')
ggplot(mpg,aes(x=cty,y=hwy)) +
geom_point(stat="identity") +
ggtitle('mpg데이터 도시연비와 고속도로연비 산점도')
ggplot(mpg,aes(x=cty,y=hwy)) +
geom_point(stat="identity") +
ggtitle('mpg데이터 도시연비와 고속도로연비 산점도')
# 3. cut과 color에 따른 가격의 변화를 보여주는 그래프를 작성하세요.
diamonds
p2<- midwest
poptotal
ggplot(poptotal,aes(x=poptotal,y=popasian)) +
geom_point(stat="identity")
p3 <- mpg
p4 <- p3 %>%
group_by(manufacturer) %>%
filter(class == "suv") %>%
summarise(cty_avg = mean(cty))%>%
head(5)
ggplot(p4, aes(x=manufacturer,y=cty_avg)) +
geom_bar(stat="identity", fill="dark green", colour="red")
p4 <- p3 %>%
group_by(manufacturer) %>%
filter(class == "suv") %>%
summarise(cty_avg = mean(cty))%>%
arrange(desc(cty_avg))%>%
head(5)
ggplot(p4, aes(x=manufacturer,y=cty_avg)) +
geom_bar(stat="identity", fill="dark green", colour="red")
p4
ggplot(p4, aes(x=manufacturer,y=cty_avg)) +
geom_bar(stat="identity", fill=manufacturer)
ggplot(p4, aes(x=reorder(manufacturer,-cty_avg),y=cty_avg)) +
geom_col()
ggplot(p4, aes(x=reorder(manufacturer,-cty_avg),y=cty_avg,fill=manufacturer)) +
geom_col()
p3 <- mpg
p5 <- p3 %>%
group_by(class)%>%
summarise(class_count = n()) %>%
arrange(desc(class_count))
ggplot(p5, aes(x=class,y=class_count)) + geom_bar(stat="identity", fill= "grey", colour="white")
ggplot(p5, aes(x=class,y=class_count)) + geom_col(stat="identity", fill= "grey", colour="white")
ggplot(p5, aes(x=class,y=class_count)) + geom_col()
bar
ggplot(p5, aes(x=class,y=class_count)) + geom_bar(stat="identity", fill= "grey", colour="white")
economics
ggplot(economics,aes(x=date,y=psavert)) +
geom_segment(aes(yend=psavert),xend=0)
p6 <-ggplot(economics,aes(x=date, y=psavert))
p6 + geom_point(color='red') + geom_line()
par(mfrow=c(1,3))
boxplot(compact_cty$cty,
col=c('red'),
names=c('compact_cty'),
main='compact')
boxplot(subcompact_cty$cty,
col=c('green'),
names=c('subcompact_cty'),
main='subcompact')
boxplot(suv_cty$cty,
col=c('yellow'),
names=c('suv_cty'),
main='suv')
ggplot(p9, aes(x=cut,y=cut_count)) + geom_bar(stat="identity", fill= "grey", colour="white")
ggplot(p9, aes(x=cut,y=cut_count,fill=cut)) + geom_bar(stat="identity", fill= "grey", colour="white")
ggplot(p9, aes(x=cut,y=cut_count,fill=cut)) + geom_bar(stat="identity", fill= "grey", colour="white")
ggplot(p9, aes(x=cut,y=cut_count, fill=cut)) + geom_bar(stat="identity", fill= "grey", colour="white")
ggplot(p9, aes(x=cut,fill=cut)) + geom_bar(stat="identity", fill= "grey", colour="white")
ggplot(p9, aes(x=cut,y=cut_count)) + geom_bar(stat="identity", fill= "grey", colour="white")
ggplot(p9, aes(x=cut,y=cut_count, fill=cut)) + geom_bar(stat="identity", fill= "grey", colour="white")
ggplot(p9, aes(x=cut,y=cut_count, fill=cut)) + geom_bar(stat="identity", fill= "grey", colour="white")
ggplot(p9, aes(x=cut,y=cut_count, fill=cut)) + geom_bar(stat="identity", fill= "grey", colour="white")
ggplot(p9, aes(x=cut,y=cut_count, fill=cut)) + geom_bar()
ggplot(p9, aes(x=cut,y=cut_count)) + geom_bar(stat="identity", fill= "grey", colour="white")
ggplot(p9, aes(x=cut,y=cut_count)) + geom_bar(stat="identity", fill= cut, colour="white")
ggplot(p9, aes(x=cut,y=cut_count)) + geom_bar(stat="identity", fill=cut, colour="white")
ggplot(p9, aes(x=cut,y=cut_count)) + geom_bar(stat="identity", fill="gray", colour="white")
ggplot(p12,aes(x=cut, y=cut_avg)) +
geom_bar(stat="identity",fill=c('red','orange','yellow','green','blue')) +
geom_point(color='black', size = 3)
ggplot(p12,aes(x=cut, y=cut_avg, fill=cut)) +
geom_col()
# 3. cut과 color에 따른 가격의 변화를 보여주는 그래프를 작성하세요.
View(diamonds)
diamonds %>%
group_by(color)%>%
summarise(col_price_avg = mean(price))
p13 <- diamonds %>%
group_by(color)%>%
summarise(col_price_avg = mean(price))
p13
ggplot(p13,aes(x=color,fill=color)) + geom_col()
ggplot(p13,aes(x=color,y=col_price_avg,fill=color)) + geom_col()
knitr::opts_chunk$set(echo = TRUE)
ggplot(mpg,aes(x=cty,y=hwy)) +
geom_point(stat="identity") +
ggtitle('mpg데이터 도시연비와 고속도로연비 산점도')
ggplot(mpg,aes(x=cty,y=hwy)) +
geom_point(stat="identity") +
ggtitle('mpg데이터 도시연비와 고속도로연비 산점도')
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(
echo = TRUE,
message = TRUE,
warning = TRUE
)
p2<- midwest
poptotal <- p2 %>%
filter(poptotal <= 500000, popasian <=10000)
poptotal
ggplot(poptotal,aes(x=poptotal,y=popasian)) +
geom_point(stat="identity")
p3 <- mpg
p4 <- p3 %>%
group_by(manufacturer) %>%
filter(class == "suv") %>%
summarise(cty_avg = mean(cty))%>%
arrange(desc(cty_avg))%>%
head(5)
p3 <- mpg
p4 <- p3 %>%
group_by(manufacturer) %>%
filter(class == "suv") %>%
summarise(cty_avg = mean(cty))%>%
arrange(desc(cty_avg))%>%
head(5)
ggplot(p4, aes(x=reorder(manufacturer,-cty_avg),y=cty_avg,fill=manufacturer)) +
geom_col()
p3 <- mpg
p5 <- p3 %>%
group_by(class)%>%
summarise(class_count = n()) %>%
arrange(desc(class_count))
ggplot(p5, aes(x=class,y=class_count)) + geom_bar(stat="identity", fill= "grey", colour="white")
p6 <-ggplot(economics,aes(x=date, y=psavert))
p6 + geom_point(color='red') + geom_line()
p3 <- mpg
compact_cty <- filter(p3, class == 'compact') ; compact_cty
subcompact_cty <- filter(p3, class == 'subcompact') ; subcompact_cty
suv_cty <- filter(p3, class == 'suv') ; suv_cty
par(mfrow=c(1,3))
boxplot(compact_cty$cty,
col=c('red'),
names=c('compact_cty'),
main='compact')
boxplot(subcompact_cty$cty,
col=c('green'),
names=c('subcompact_cty'),
main='subcompact')
boxplot(suv_cty$cty,
col=c('yellow'),
names=c('suv_cty'),
main='suv')
p9 <- diamonds %>%
group_by(cut)%>%
summarise(cut_count = n()) %>%
arrange(desc(cut_count))
ggplot(p9, aes(x=cut,y=cut_count)) + geom_bar(stat="identity", fill="gray", colour="white")
p12 <-diamonds %>%
group_by(cut) %>%
summarise(cut_avg = mean(price))
ggplot(p12,aes(x=cut, y=cut_avg)) +
geom_bar(stat="identity",fill=c('red','orange','yellow','green','blue')) +
geom_point(color='black', size = 3)
p13 <- diamonds %>%
group_by(color)%>%
summarise(col_price_avg = mean(price))
ggplot(p13,aes(x=color,y=col_price_avg,fill=color)) + geom_col()
palete <- brewer.pal(9,"Set1")
knitr::opts_chunk$set(include = FALSE, eval = FALSE)
library(KoNLP)
library(wordcloud)
library(RColorBrewer)
useSejongDic()
library(stringr)
setwd('D:/Workspace/R_Data_Analysis/Part2/Stage1_WordCloud/EX04_work')
txt <- readLines('data/응답소_여름.txt')
answer2 <- sapply(txt,extractNoun,USE.NAMES = F)
head(unlist(answer2),30)
cdata <- unlist(answer2)
answer2 <- str_replace_all(cdata,'[^[:alpha:]]','')
answer2 <- gsub(' ','',answer2)
txt <- readLines('data/gsub.txt')
cnt_txt <- length(txt)
i <- 1
for (i in 1:cnt_txt) {
answer2 <- gsub((txt[i]),'',answer2)
}
answer2 <- Filter(function(x) {nchar(x) >= 2}, answer2)
answer2 <- Filter(function(x) {nchar(x) <= 10}, answer2)
write(unlist(answer2),'answer_2.txt')
rev2 <- read.table('answer_2.txt')
wordcount2 <- table(rev2)
palete <- brewer.pal(9,"Set1")
wordcloud(names(wordcount2), freq = wordcount2, scale = c(1,1), rot.per = 0.25, min.freq = 5,
random.order = F, random.color = T, colors=palete)
wordcloud(names(wordcount3), freq = wordcount3, scale = c(1,1), rot.per = 0.25, min.freq = 30,
random.order = F, random.color = T, colors=palete)
wordcloud(names(wordcount3), freq = wordcount3, scale = c(1,1), rot.per = 0.25, min.freq = 2,
random.order = F, random.color = T, colors=palete)
txt <- readLines('data/응답소_봄.txt')
answer1 <- sapply(txt,extractNoun,USE.NAMES = F)
knitr::opts_chunk$set(include = FALSE, eval = FALSE)
library(KoNLP)
library(wordcloud)
library(RColorBrewer)
useSejongDic()
library(stringr)
setwd('D:/Workspace/R_Data_Analysis/Part2/Stage1_WordCloud/EX04_work')
txt <- readLines('data/응답소_봄.txt')
answer1 <- sapply(txt,extractNoun,USE.NAMES = F)
answer1 <- sapply(txt,extractNoun,USE.NAMES = F)
head(unlist(answer1),30)
cdata <- unlist(answer1)
answer1 <- str_replace_all(cdata,'[^[:alpha:]]','')
answer1 <- gsub(' ','',answer1)
txt <- readLines('data/gsub.txt') ;txt
cnt_txt <- length(txt)
txt <- readLines('data/gsub.txt')
cnt_txt <- length(txt)
i <- 1
for (i in 1:cnt_txt) {
answer1 <- gsub((txt[i]),'',answer1)
}
answer1 <- Filter(function(x) {nchar(x) >= 2}, answer1)
answer1 <- Filter(function(x) {nchar(x) <= 10}, answer1)
write(unlist(answer1),'answer_1.txt')
answer1 <- Filter(function(x) {nchar(x) >= 2}, answer1)
answer1 <- Filter(function(x) {nchar(x) <= 6}, answer1)
write(unlist(answer1),'answer_1.txt')
rev <- read.table('answer_1.txt')
wordcount <- table(rev)
palete <- brewer.pal(9,"Set1")
wordcloud(names(wordcount), freq = wordcount, scale = c(1,1), rot.per = 0.25, min.freq = 2,
random.order = F, random.color = T, colors=palete)
wordcloud(names(wordcount), freq = wordcount, scale = c(0.5,0.5), rot.per = 0.25, min.freq = 2,
random.order = F, random.color = T, colors=palete)
wordcloud(names(wordcount), freq = wordcount, scale = c(0.5,0.5), rot.per = 0.25, min.freq = 5,
random.order = F, random.color = T, colors=palete)
txt <- readLines('data/응답소_봄.txt')
answer1 <- sapply(txt,extractNoun,USE.NAMES = F)
answer1
head(unlist(answer1),30)
cdata <- unlist(answer1)
answer1 <- str_replace_all(cdata,'[^[:alpha:]]','')
answer1 <- gsub(' ','',answer1)
answer1
txt <- readLines('data/gsub.txt') ;txt
cnt_txt <- length(txt)
cnt_txt
i <- 1
for (i in 1:cnt_txt) {
answer1 <- gsub((txt[i]),'',answer1)
}
answer1 <- Filter(function(x) {nchar(x) >= 2}, answer1)
answer1 <- Filter(function(x) {nchar(x) <= 10}, answer1)
write(unlist(answer1),'answer_1.txt')
rev <- read.table('answer_1.txt')
nrow(rev)
wordcount <- table(rev)
head(sort(wordcount, decreasing = T),30)
txt <- readLines('data/응답소_봄.txt')
answer1 <- sapply(txt,extractNoun,USE.NAMES = F)
answer1
head(unlist(answer1),30)
cdata <- unlist(answer1)
answer1 <- str_replace_all(cdata,'[^[:alpha:]]','')
answer1 <- gsub(' ','',answer1)
answer1
txt <- readLines('data/gsub.txt') ;txt
cnt_txt <- length(txt)
cnt_txt
i <- 1
for (i in 1:cnt_txt) {
answer1 <- gsub((txt[i]),'',answer1)
}
answer1 <- Filter(function(x) {nchar(x) >= 2}, answer1)
answer1 <- Filter(function(x) {nchar(x) <= 10}, answer1)
write(unlist(answer1),'answer_1.txt')
rev <- read.table('answer_1.txt')
nrow(rev)
wordcount <- table(rev)
head(sort(wordcount, decreasing = T),30)
txt <- readLines('data/응답소_봄.txt')
setwd('D:/Workspace/R_Data_Analysis/Part2/Stage1_WordCloud/EX04_work')
txt <- readLines('data/응답소_봄.txt')
answer1 <- sapply(txt,extractNoun,USE.NAMES = F)
answer1
head(unlist(answer1),30)
cdata <- unlist(answer1)
answer1 <- str_replace_all(cdata,'[^[:alpha:]]','')
answer1 <- gsub(' ','',answer1)
answer1
txt <- readLines('data/gsub.txt') ;txt
cnt_txt <- length(txt)
cnt_txt
i <- 1
for (i in 1:cnt_txt) {
answer1 <- gsub((txt[i]),'',answer1)
}
answer1 <- Filter(function(x) {nchar(x) >= 2}, answer1)
answer1 <- Filter(function(x) {nchar(x) <= 10}, answer1)
write(unlist(answer1),'answer_1.txt')
rev <- read.table('answer_1.txt')
nrow(rev)
wordcount <- table(rev)
head(sort(wordcount, decreasing = T),30)
wordcloud(names(wordcount), freq = wordcount, scale = c(5,1), rot.per = 0.25, min.freq = 2,
random.order = F, random.color = T, colors=palete)
wordcloud(names(wordcount), freq = wordcount, scale = c(1,1), rot.per = 0.25, min.freq = 2,
random.order = F, random.color = T, colors=palete)
wordcloud(names(wordcount), freq = wordcount, scale = c(3,1), rot.per = 0.25, min.freq = 100,
random.order = F, random.color = T, colors=palete)
wordcloud(names(wordcount), freq = wordcount, scale = c(3,1), rot.per = 0.25, min.freq = 50,
random.order = F, random.color = T, colors=palete)
wordcloud(names(wordcount), freq = wordcount, scale = c(3,1), rot.per = 0.25, min.freq = 30,
random.order = F, random.color = T, colors=palete)
wordcloud(names(wordcount), freq = wordcount, scale = c(3,1), rot.per = 0.25, min.freq = 25,
random.order = F, random.color = T, colors=palete)
wordcloud(names(wordcount), freq = wordcount, scale = c(3,1), rot.per = 0.25, min.freq = 20,
random.order = F, random.color = T, colors=palete)
wordcloud(names(wordcount), freq = wordcount, scale = c(3,1), rot.per = 0.25, min.freq = 20,
random.order = F, random.color = T, colors=palete)
wordcloud(names(wordcount), freq = wordcount, scale = c(3,1), rot.per = 0.25, min.freq = 20,
random.order = F, random.color = T, colors=palete)
wordcloud(names(wordcount), freq = wordcount, scale = c(3,1), rot.per = 0.25, min.freq = 30,
random.order = F, random.color = T, colors=palete)
wordcloud(names(wordcount), freq = wordcount, scale = c(5,1), rot.per = 0.25, min.freq = 20,
random.order = F, random.color = T, colors=palete)
wordcloud(names(wordcount), freq = wordcount, scale = c(5,1), rot.per = 0.25, min.freq = 2,
random.order = F, random.color = T, colors=palete)
wordcloud(names(wordcount), freq = wordcount, scale = c(3,1), rot.per = 0.25, min.freq = 30,
random.order = F, random.color = T, colors=palete)
wordcloud(names(wordcount), freq = wordcount, scale = c(3,1), rot.per = 0.25, min.freq = 30,
random.order = F, random.color = T, colors=palete)
wordcloud(names(wordcount), freq = wordcount, scale = c(3,1), rot.per = 0.25, min.freq = 30,
random.order = F, random.color = T, colors=palete)
wordcloud(names(wordcount2), freq = wordcount2, scale = c(3,1), rot.per = 0.25, min.freq = 30,
random.order = F, random.color = T, colors=palete)
txt <- readLines('data/응답소_여름.txt')
answer2 <- sapply(txt,extractNoun,USE.NAMES = F)
head(unlist(answer2),30)
cdata <- unlist(answer2)
answer2 <- str_replace_all(cdata,'[^[:alpha:]]','')
answer2 <- gsub(' ','',answer2)
txt <- readLines('data/gsub.txt')
cnt_txt <- length(txt)
i <- 1
for (i in 1:cnt_txt) {
answer2 <- gsub((txt[i]),'',answer2)
}
answer2 <- Filter(function(x) {nchar(x) >= 2}, answer2)
answer2 <- Filter(function(x) {nchar(x) <= 10}, answer2)
write(unlist(answer2),'answer_2.txt')
rev2 <- read.table('answer_2.txt')
wordcount2 <- table(rev2)
palete <- brewer.pal(9,"Set1")
wordcloud(names(wordcount2), freq = wordcount2, scale = c(3,1), rot.per = 0.25, min.freq = 30,
random.order = F, random.color = T, colors=palete)
txt <- readLines('data/응답소_가을.txt')
answer3 <- sapply(txt,extractNoun,USE.NAMES = F)
cdata <- unlist(answer3)
answer3 <- str_replace_all(cdata,'[^[:alpha:]]','')
answer3 <- gsub(' ','',answer3)
txt <- readLines('data/gsub.txt')
cnt_txt <- length(txt)
i <- 1
for (i in 1:cnt_txt) {
answer3 <- gsub((txt[i]),'',answer3)
}
answer3 <- Filter(function(x) {nchar(x) >= 2}, answer3)
answer3 <- Filter(function(x) {nchar(x) <= 10}, answer3)
write(unlist(answer3),'answer_3.txt')
rev3 <- read.table('answer_3.txt')
wordcount3 <- table(rev3)
palete <- brewer.pal(9,"Set1")
(names(wordcount3), freq = wordcount3, scale = c(3,1), rot.per = 0.25, min.freq = 30,
wordcount3 <- table(rev3)
palete <- brewer.pal(9,"Set1")
wordcloud(names(wordcount3), freq = wordcount3, scale = c(3,1), rot.per = 0.25, min.freq = 30,
random.order = F, random.color = T, colors=palete)
legend(0.3,1,"가을철 응답소  키워드 분석", cex = 0.8, fill = NA, border=NA, bg = "white",
text.col="orange", text.font=2, box.col="orange")
legend(0.3,1,"가을철 응답소  키워드 분석", cex = 0.3, fill = NA, border=NA, bg = "white",
text.col="orange", text.font=2, box.col="orange")
legend(0.3,1,"가을철 응답소  키워드 분석", cex = 0.1, fill = NA, border=NA, bg = "white",
text.col="orange", text.font=2, box.col="orange")
legend(0.3,1,"가을철 응답소  키워드 분석", cex = 0.8, fill = NA, border=NA, bg = "white",
text.col="orange", text.font=0.5, box.col="orange")
wordcloud(names(wordcount3), freq = wordcount3, scale = c(3,1), rot.per = 0.25, min.freq = 30,
random.order = F, random.color = T, colors=palete)
txt <- readLines('data/응답소_겨울.txt')
answer4 <- sapply(txt,extractNoun,USE.NAMES = F)
head(unlist(answer4),30)
cdata <- unlist(answer4)
answer4 <- str_replace_all(cdata,'[^[:alpha:]]','')
answer4 <- gsub(' ','',answer4)
txt <- readLines('data/gsub.txt')
cnt_txt <- length(txt)
i <- 1
for (i in 1:cnt_txt) {
answer4 <- gsub((txt[i]),'',answer4)
}
answer4 <- Filter(function(x) {nchar(x) >= 2}, answer4)
answer4 <- Filter(function(x) {nchar(x) <= 10}, answer4)
write(unlist(answer4),'answer_4.txt')
rev4 <- read.table('answer_4.txt')
wordcount4 <- table(rev4)
palete <- brewer.pal(9,"Set1")
wordcloud(names(wordcount4), freq = wordcount4, scale = c(3,1), rot.per = 0.25, min.freq = 30,
random.order = F, random.color = T, colors=palete)
wordcloud(names(wordcount4), freq = wordcount4, scale = c(2,1), rot.per = 0.25, min.freq = 35,
random.order = F, random.color = T, colors=palete)
