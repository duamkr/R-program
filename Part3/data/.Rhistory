print(5%/2%)
print(5%/%2)
print(5%%2)
print(5^2)
10000+10000
100000 + 100000
1 / 1000000
1 / 100000
1 / 1000
'1'+'2'
as.numeric('1') + as.numeric('2')
'first'
"second"
first
first <- 1
first
calss(1)
class(1)
class('1')
3 & 0
3 & 1
3 | 0
!0
!3
cat(1,NA,2)
cat(1,NULL,2)
sum(1,NA,2)
sum(1,NULL,2)
sum(1, NA, 2, na.rm = T)
class(NA)
class(NULL)
setwd("d:/Workspace/R_Data_Analysis/Part3/data")
txt1 <- read.csv("factor_test")
txt1 <- read.csv("factor_test.csv")
txt1
txt2 <- read.csv("factor_test_utf8.csv")
factor1 <- factor(txt1$blood)
factor1
gender <- facotor(txt$sex)
gender1 <- facotor(txt$sex)
gender1 <- factor(txt$sex)
gender
1
gender1
gender1 <- factor(txt1$sex)
gender1
View(txt1)
gender1
summary(factor1)
gender1
list.file()
list.files()
scan1 <- scan('scan_1.txt')
san1
scan1
scan2 <- scan('scan_2.txt')
scan2
scan2 <- scan('scan_2.txt',what="") ; scan2
scan3 <- scan('scan_3.txt',what="") ; scan3
scan4 <- scan('scan_4.txt',what="") ; scan4
input <- scan()
input
input <- scan(what="")
input
input <- scan()
input
input3 <- readline()
input3
input4 <- readline("Are you OK? :")
input4
input5 <- readLines('scan_4.txt')
input5
fruits <- read.table('fruits.txt')
fruits
fruits <- read.table('fruits.txt',header=T)
fruits
fruit2 <- read.table('fruits_2.txt') ; fruit2
fruit2 <- read.table('fruits_2.txt',skip=2) ; fruit2
fruit2 <- read.table('fruits_2.txt',nrows=2) ; fruit2
f2top <- read.table('fruits_2.txt',nrows=2)
f2bottom <- read.table('fruits_2.txt',skip=3)
f2top; f2bottm
f2top; f2bottom
fruit3_ rad.csv('fruits_3.csv')
fruit3_ read.csv('fruits_3.csv')
fruit3_read.csv('fruits_3.csv')
fruit3<-read.csv('fruits_3.csv')
fruit3
fruit4<-read.csv('fruits_4.csv') ; fruit4
fruit4<-read.csv('fruits_4.csv',header=F)
fruit4
label <- c('NO','NAME','PRICE','QTY')
fruit4<-read.csv('fruits_4.csv',header=F,col.names-label)
fruit4<-read.csv('fruits_4.csv',header=F,col.names=label)
fruit4
install.packages("googleVis")
library(googleVis)
install.packages("sqldf")
library(sqldf)
Furits
Fruits
write.scv(Fruits, "Fruits_sql.csv", quote=F, row.names=F)
write.csv(Fruits, "Fruits_sql.csv", quote=F, row.names=F)
fruit_2 <- read.csv.sql("Fruits_sql.csv",
sql="SELECT * FROM file WHERE Year = 2008")
fruit_2
mat3
mat3 <- matrix(c(1,2,3,4),nrow=2, byrow=T)      #byrow=T 는 가로를 기준으로 출력됨
mat3
install.packages("XLConnect")
Library(XLConnect)
library(XLConnect)
data1 <- loadWorkbook("fruits_6.xls", crate=T)
data1 <- loadWorkbook("fruits_6.xls", create=T)
rm(data1)
data1=loadWorkbook("fruits_6.xls", create=T)
data2=readWorksheet(data1,sheet="sheet1")
data2=readWorksheet(data1,sheet="sheet1",
startRow=1,
endRow=8,
startCol=1,
endCol=5)
data2
fruits6 <- read.delim("clipboard", header=T)
fruits6
install.packages("readxl")
library(readxl)
library(readxl)
fruits7 <- read_excel("fruits_6.xls",
sheet = "Sheet1".
range = "A2:D6",
colnames = TURE,
col_types = "guess",
na = "NA"
)
fruits7 <- read_excel("fruits_6.xls",
sheet = "Sheet1".
range = "A2:D6",
colnames = TURE,
col_types = "guess",
na = "NA")
fruits7 <- read_excel("fruits_6.xls",
sheet = "Sheet1".
range = "A2:D6",
colnames = TRUE,
col_types = "guess",
na = "NA")
fruits7 <- read_excel("fruits_6.xls",
sheet = "Sheet1",
range = "A2:D6",
colnames = TRUE,
col_types = "guess",
na = "NA")
fruits7
fruits7 <- read_excel("fruits_6.xls",
sheet = "Sheet1",
range = "A2:D6",
col_names = TRUE,
col_types = "guess",
na = "NA")
fruits7
subset(Fruits, Fruits$Year==2008)
fruit_3 <-subset(Fruits, Fruits$Year==2008)       # SQL쿼리와 같은 개념의 subset 명령어
fruit_3
# function
lm(list=ls())
# function
rm(list=ls())
# function
vec1 <- c(1:5)
vec2 <- c('a','b','c','d','e')
max(vec1)
max(vec2)
mean(vec1)
mean(vec2)
min(vec1)
sd(vec1)
sum(vec1)
var(vec1)
library(googleVIS)
library(googleVis)
Fruits
# aggregate(계산된 컬럼~기준된컬럼, 데이터, 함수)
#연도별 판매 총액
aggregate(Sales~Year,Furuit,sum)
# aggregate(계산된 컬럼~기준된컬럼, 데이터, 함수)
#연도별 판매 총액
aggregate(Sales~Year, Furuit, sum)
# aggregate(계산된 컬럼~기준된컬럼, 데이터, 함수)
#연도별 판매 총액
aggregate(Sales~Year, Fruuit, sum)
# aggregate(계산된 컬럼~기준된컬럼, 데이터, 함수)
#연도별 판매 총액
aggregate(Sales~Year, Fruit, sum)
# aggregate(계산된 컬럼~기준된컬럼, 데이터, 함수)
#연도별 판매 총액
aggregate(Sales~Year, Fruits, sum)
aggregate(Sales~Year, Fruits, max
)
aggregate(Sales~Year, Fruits, max)
aggregate(Sales~Year, Fruits, mean)
aggregate(Sales~Year, Fruits, max)      # 연도별 과일의
# aggregate(계산된 컬럼~기준된컬럼, 데이터, 함수)
#연도별 판매 총액
aggregate(Sales~Year, Fruits, sum)      # 연도별 과일의 판매량 계산
#품목별 판매
aggregate(Sales~Fruit, Fruits, sum )
# aggregate(계산된 컬럼~기준된컬럼, 데이터, 함수)
#연도별 판매 총액
aggregate(Sales~Year, Fruits, sum)      # 연도별 과일의 총 판매량 계산
#품목별 판매
aggregate(Sales~Fruit, Fruits, sum )
aggregate(Sales~Fruit+Year, Fruits, sum)
# apply(대상, 적용함수)
mat1 <- maxrix(1,2,3,
4,5,6,nrow=2, byrow=T)
# apply(대상, 적용함수)
mat1 <- matrix(1,2,3,
4,5,6,nrow=2, byrow=T)
# apply(대상, 적용함수)
mat1 <- matrix(1,2,3,
4,5,6),nrow=2, byrow=T)
# apply(대상, 적용함수)
mat1 <- matrix(1,2,3,
4,5,6),nrow=2, byrow=T)
# apply(대상, 적용함수)
mat1 <- matrix(c(1:6)),nrow=2, byrow=T)
# apply(대상, 적용함수)
mat1 <- matrix(c(1:6),nrow=2, byrow=T)
mat1
apply(mat1, 1, sum)
apply(mat1, 2, sum)
apply(mat1, 1, prud)
apply(mat1, 1, prod)
apply(mat1[,c(2,3)])
apply(mat1[,c(2,3)],sum)
apply(mat1[,c(2,3)],1,sum)
mat1
list1 <- Fruits$Sales; list1
list1 <- list(Fruits$Sales); list1
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
list2 <- list(Fruits$Profit); list2
lapply(c(list1, list2), max)
sapply(c(list1,list2),max)
lapply(Fruits[,c(4,5)],max)
sapply(Fruits[,c(4,5)],max)
sapply(Fruits[,c(4,5)],max)       #행은 전체, 열은 4,5번 열의 max값 -> vector형태 출력
Fruits
tapply(Sales,Fruit,sum)      # err발생 ,
attach(Fruits)
tapply(Sales,Fruit,sum)
tapply(Sales,Years,sum)
tapply(Sales,Year,sum)
vec1 <- c(1:5)
vec2 <- c(10:50,10)
vec2
vec2 <- seq(10:50,10)
vec2 <- seq(10,50,10)
vec2
vec3 <- seq(100,500,100)
mapply(sum, vec1, vec2, vec3)
#1. read.csv(data1.csv)
data1 <-read.csv(data1.csv)
#1. read.csv(data1.csv)
data1 <-read.csv('data1.csv')
data1
Fruits
aggregate(Year~)
data1
aggregate(연령별~Yeas,data1,sum)
lapply(data1[,,],sum)
lapply(data1(c[,,]),sum)
lapply(data1([,c(2:13)]),sum)
lapply(data1[,c(2:13)],sum)
sapply(data1[,c(2:13)],sum)
sapply(data1[,c(2:14)],sum)
aggregate(연령별~c[2:14],data1,sum)
aggregate(연령별~(data1c[2:14]),data1,sum)
# aggregate(계산된 컬럼~기준된컬럼, 데이터, 함수)
#연도별 판매 총액
aggregate(Sales~Year, Fruits, sum)      # 연도별 과일의 총 판매량 계산
sapply(Fruits[,c(4,5)],max)       #행은 전체, 열은 4,5번 열의 max값 -> vector형태 출력
lapply(Fruits[,c(4,5)],max)       #행은 전체, 열은 4,5번 열의 max값 -> list형태 출력
sapply(Fruits[,c(4,5)],max)       #행은 전체, 열은 4,5번 열의 max값 -> vector형태 출력
sapply(data1[c(2:14)],sum)
aggregate(연령별~(data1c[2:14]),data1,sum)
sapply(data1[,c(2:14)],sum)
sapply(data1[c(2:14),],sum)
sapply(data1[c(1:5),],sum)
sapply(data1[c(1:5)],sum)
aggregate(연령별~(data1c[2:14]),data1,sum)
aggregate(연령별~(data1[c[2:14]),data1,sum)
aggregate(연령별~(data1[,c[2:14]),data1,sum)
sapply(Fruits[,c(4,5)],max)       #행은 전체, 열은 4,5번 열의 max값 -> vector형태 출력
aggregate(Sales~Year, Fruits, mean)     # 연도별 과일 판매량의 평균
aggregate(Sales~Year, Fruits, max)      # 연도별 과일 판매량의 제일 큰 값
# aggregate(계산된 컬럼~기준된컬럼, 데이터, 함수)
#연도별 판매 총액
aggregate(Sales~Year, Fruits, sum)      # 연도별 과일의 총 판매량 계산
apply(mat1, 1, prod)    # 1 - 행 단위 곱
apply(mat1, 2, sum)     # 1 - 열 단위 합계
apply(data1, 2, sum)
apply(data1, 5, sum)
apply(data1[,c(2:14)], sum)
apply(mat1[,c(2,3)],1,sum)     # mat1의 행은 전체, 열은 2,3의 합
apply(data1[,c(2:14)],1, sum)
apply(data1[,c(2:5)],1, sum)
apply(data1[,c(2:15)],1, sum)
apply(data1[,c(2:14)],1, sum)
#2.
data2 <-read.csv('1-4호선승하차승객수')
#2.
data2 <-read.csv('1-4호선승하차승객수.csv')
data2
aggregate(승차~노선번호,data2,sum)
sapply(aggregate(승차~노선번호,data2,sum))
sapply(aggregate(승차~노선번호,data2),sum)
sapply(c(line_1,line_2,line_3,line_4),sum)
sapply(c('line_1','line_2','line_3','line_4'),sum)
sapply(data2,c('line_1','line_2','line_3','line_4'),sum)
sapply(data2[,c('line_1','line_2','line_3','line_4'),sum)
sapply(data2[,c('line_1','line_2','line_3','line_4')],sum)
sapply(data2[,c('line_1,line_2,line_3,line_4)],sum)
sapply(data2[,c(line_1,line_2,line_3,line_4)],sum)
data2
data2
#2.
data2 <-read.csv('1-4호선승하차승객수.csv')
data2
sapply(data2[,c(line_1,line_2,line_3,line_4)],sum)
aggregate(승차~노선번호,data2,sum)
vector(aggregate(승차~노선번호,data2,sum))
# aggregate(계산된 컬럼~기준된컬럼, 데이터, 함수)
#연도별 판매 총액
aggregate(Sales~Year, Fruits, sum)      # 연도별 과일의 총 판매량 계산
aggregate(Sales~Year, Fruits, mean)     # 연도별 과일 판매량의 평균
#품목별 판매
aggregate(Sales~Fruit, Fruits, sum )    # 품목별 과일의 총 판매량 계산
# apply(대상, 적용함수)
mat1 <- matrix(c(1:6),nrow=2, byrow=T)
apply(mat1, 1, sum)     # 1 - 행 단위 합계
apply(mat1, 2, sum)     # 1 - 열 단위 합계
list1 <- list(Fruits$Sales); list1
list1 <- list(Fruits$Sales); list1
lapply(c(list1, list2), max)      #list1,list2에서 max값 -> list형태 출력
list1 <- list(Fruits$Sales); list1
lapply(c(list1, list2), max)      #list1,list2에서 max값 -> list형태 출력
sapply(c(list1,list2),max)        #list1,list2에서 max값 -> vector형태 출력
data2
list5 <- list(Fruits$노선번호); list5
sapply(data2[,c(line_1,line_2,line_3,line_4)],sum)
aggregate(승차~노선번호,data2,sum)
aggregate(하하차~노선번호,data2,sum)
aggregate(하차~노선번호,data2,sum)
aggreagte(승차~하차,data2,sum)
sapply(data2[,c(4,5)],sum)       #행은 전체, 열은 4,5번 열의 max값 -> vector형태 출력
sapply(data2[c(1:14),c(4,5)],sum)       #행은 전체, 열은 4,5번 열의 max값 -> vector형태 출력
sapply(Fruits[,c(4,5)],max)       #행은 전체, 열은 4,5번 열의 max값 -> vector형태 출력
sapply(Fruits[,c(4,5)],sum)       #행은 전체, 열은 4,5번 열의 max값 -> vector형태 출력
data2
sapply(data2[,c(3,4)],sum)       #행은 전체, 열은 4,5번 열의 max값 -> vector형태 출력
aggregate(노선번호~승차+하차,data2,sum)
aggregate(승차~노선번호,data2,sum)
aggregate(승차+하차~노선번호호,data2,sum)
aggregate(승차+하차~노선번호,data2,sum)
aggregate(승차차~노선번호,data2,sum)
aggregate(승차~노선번호,data2,sum)
aggregate(하차~노선번호,data2,sum)
sapply(data1[,c(2:14)],sum)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
apply(data1[,c(2:14)],1, sum)
#2.
data2 <-read.csv('1-4호선승하차승객수.csv')
sapply(data1[,c(2:14)],sum)
sapply(data2[,3],sum)
sapply(data1[,c(2:14)],sum)
sapply(data1[,c(2:14)],sum)
apply(data1[,c(2:14)],1, sum)
#2.
data2 <-read.csv('1-4호선승하차승객수.csv')
#품목별 판매
aggregate(Sales~Fruit, Fruits, sum )    # 품목별 과일의 총 판매량 계산
aggregate(Sales~Fruit+Year, Fruits, sum)     # 추가조건으로 +" "  항목을 추가 가능
mat1
apply(mat1, 1, sum)     # 1 - 행 단위 합계
apply(mat1, 2, sum)     # 1 - 열 단위 합계
list1 <- list(Fruits$Sales); list1
list2 <- list(Fruits$Profit); list2
lapply(c(list1, list2), max)      #list1,list2에서 max값 -> list형태 출력
lapply(Fruits[,c(4,5)],max)       #행은 전체, 열은 4,5번 열의 max값 -> list형태 출력
sapply(c(list1,list2),max)        #list1,list2에서 max값 -> vector형태 출력
sapply(Fruits[,c(4,5)],max)       #행은 전체, 열은 4,5번 열의 max값 -> vector형태 출력
sapply(data2[c(2:14),c(3)],max)
sapply(data2[c(2:14),c(3)],sum)
sapply(data2[,c(3)],sum)
sapply(c(list1,list2),max)        #list1,list2에서 max값 -> vector형태 출력
tapply(Sales,Fruit,sum)      # 지정 후 출력 확인
tapply(Sales,Year,sum)
tapply(승차,data2,sum)
attach(data2)
tapply(승차,노선번호,sum)
tapply(하하차,노선번호,sum)
tapply(하차,노선번호,sum)
sapply(data1[,c(2:14)],sum)
aggregate(승차~노선번호,data2,sum)          # 노선 번호별 승차인원수 합계
sapply(data1[,c(2:14)],sum)     # 년도별 합계
sapply(data1[,c(2:15)],sum)     # 년도별 합계
apply(data1[,c(2:15)],1, sum)   # 연령별 합계
apply(data1[,c(2:15)],sum)
apply(data1[,c(2:15)],2, sum)
sapply(data1[,c(2:15)],sum)     # 년도별 합계 (내가푼거)
apply(data1[,-1],1,sum)
apply(data1[,c(2:15)],1, sum)   # 연령별 합계 (내가푼거)
aggregate(승차+하차~노선번호,data2,sum)     # 노선 번호별 승하차 인원수 합계
mat1 <- matrix(c(1:6),nrow=2, byrow=T)
a <- rep(1,3)
rm(list=ls)
rm(list=ls())
mat1 <- matrix(c(1:6),nrow=2, byrow=T)
a <- rep(1,3)
mat1 <- matrix(c(1:6),nrow=2, byrow=T)
a <- rep(1,3)
mat1; a
sweep(mat1,2,a)
b <- matrix(c(2,2))
sweep(mat1, 1, b)
b <- matrix(c(2,2))
b <- matrix(c(2,2))
sweep(mat1, 1, b)
b <- matrix(c(2,2))
b
sweep(mat1, 1, b)
a <- c(1:5); length(a)
length(mat1)
length(Fruit)
length(Fruits)
log(10)
log10(10)
sin(pi)
abs(-1)
v2 <- c(1,-2,3,-4)
abs(v2)
ceiling(2.3)
floor(2.3)
choose(5,3)
myfunc <- function() {
return(10)
}
myfunc()
myfunc2 <- function(x) {
y = x * x;
return(y)
}
myfunc2(-3)
return(c)
myfunc3 <- function(a,b)  {
c <- a-b
return(c)
}
func_test1 <- function(a,b)  {
c <- a-b
return(c)
}
func_test1(3,2)
func_test1(2,3)
}
abs(c)
#2.
func_test1 <- function(a,b)  {
c <- a-b
abs(c)
}
func_test1(2,3)
func_test1(3,2)
func_test2 <- function(a,b) {
c <- abs(func_test1(a,b))
return(c)
}
func_test2(2,3)
func_test2(3,2)
#2.
func_test1 <- function(a,b)  {
result <- a-b
abs(resultc)
}
func_test1(2,3)
return(result)
#2.
func_test1 <- function(a,b)  {
result <- a-b
abs(c)
}
func_test1(3,2)
func_test2 <- function(a,b) {
c <- abs(func_test1(a,b))
return(c)
}
func_test1(2,3)
#2.
func_test1 <- function(a,b)  {
c <- a-b
abs(c)
}
func_test1(2,3)
func_test2 <- function(a,b) {
c <- abs(func_test1(a,b))
return(c)
}
func_test1(3,2)
func_test1(2,3)
func_test1(3,2)
func_test1(2,3)
